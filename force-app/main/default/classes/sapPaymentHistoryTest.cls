/* 
 * Generated by Overcast UTC 2020-01-05 06:44:28Z.
 * Changes to this class may cause incorrect behavior and will be lost if the scenario is re-activated.
 */
@istest
private class sapPaymentHistoryTest {
    @istest
    private static void testsapPaymentHistory() {
        sapPaymentHistory actual = new sapPaymentHistory();
        system.assertNotEquals(null, actual.KNB4);
    }

    @istest
    private static void TestKNB4() {
        sapPaymentHistory.KNB4 actual = new sapPaymentHistory.KNB4('a','a','a','a',0,0,0,0,0,'a','a',0,0,0,0,0,'a','a',0,0,0,0,0,'a','a',0,0,0,0,0,'a','a');

        actual.AGS05 = 0;
        actual.VZS05 = 0;
        actual.AGN05 = 0;
        actual.VZN05 = 0;
        actual.ANZ05 = 0;
        actual.JAH06 = 'a';
        actual.MON06 = 'a';
        actual.AGS06 = 0;
        actual.VZS06 = 0;
        actual.AGN06 = 0;
        actual.VZN06 = 0;
        actual.ANZ06 = 0;
        actual.JAH07 = 'a';
        actual.MON07 = 'a';
        actual.AGS07 = 0;
        actual.VZS07 = 0;
        actual.AGN07 = 0;
        actual.VZN07 = 0;
        actual.ANZ07 = 0;
        actual.JAH08 = 'a';
        actual.MON08 = 'a';
        actual.AGS08 = 0;
        actual.VZS08 = 0;
        actual.AGN08 = 0;
        actual.VZN08 = 0;
        actual.ANZ08 = 0;
        actual.JAH09 = 'a';
        actual.MON09 = 'a';
        actual.AGS09 = 0;
        actual.VZS09 = 0;
        actual.AGN09 = 0;
        actual.VZN09 = 0;
        actual.ANZ09 = 0;
        actual.JAH10 = 'a';
        actual.MON10 = 'a';
        actual.AGS10 = 0;
        actual.VZS10 = 0;
        actual.AGN10 = 0;
        actual.VZN10 = 0;
        actual.ANZ10 = 0;
        actual.JAH11 = 'a';
        actual.MON11 = 'a';
        actual.AGS11 = 0;
        actual.VZS11 = 0;
        actual.AGN11 = 0;
        actual.VZN11 = 0;
        actual.ANZ11 = 0;
        system.assertEquals('a', actual.KUNNR);
        system.assertEquals('a', actual.BUKRS);
        system.assertEquals('a', actual.JAH01);
        system.assertEquals('a', actual.MON01);
        system.assertEquals(0, actual.AGS01);
        system.assertEquals(0, actual.VZS01);
        system.assertEquals(0, actual.AGN01);
        system.assertEquals(0, actual.VZN01);
        system.assertEquals(0, actual.ANZ01);
        system.assertEquals('a', actual.JAH02);
        system.assertEquals('a', actual.MON02);
        system.assertEquals(0, actual.AGS02);
        system.assertEquals(0, actual.VZS02);
        system.assertEquals(0, actual.AGN02);
        system.assertEquals(0, actual.VZN02);
        system.assertEquals(0, actual.ANZ02);
        system.assertEquals('a', actual.JAH03);
        system.assertEquals('a', actual.MON03);
        system.assertEquals(0, actual.AGS03);
        system.assertEquals(0, actual.VZS03);
        system.assertEquals(0, actual.AGN03);
        system.assertEquals(0, actual.VZN03);
        system.assertEquals(0, actual.ANZ03);
        system.assertEquals('a', actual.JAH04);
        system.assertEquals('a', actual.MON04);
        system.assertEquals(0, actual.AGS04);
        system.assertEquals(0, actual.VZS04);
        system.assertEquals(0, actual.AGN04);
        system.assertEquals(0, actual.VZN04);
        system.assertEquals(0, actual.ANZ04);
        system.assertEquals('a', actual.JAH05);
        system.assertEquals('a', actual.MON05);
        system.assertEquals(0, actual.AGS05);
        system.assertEquals(0, actual.VZS05);
        system.assertEquals(0, actual.AGN05);
        system.assertEquals(0, actual.VZN05);
        system.assertEquals(0, actual.ANZ05);
        system.assertEquals('a', actual.JAH06);
        system.assertEquals('a', actual.MON06);
        system.assertEquals(0, actual.AGS06);
        system.assertEquals(0, actual.VZS06);
        system.assertEquals(0, actual.AGN06);
        system.assertEquals(0, actual.VZN06);
        system.assertEquals(0, actual.ANZ06);
        system.assertEquals('a', actual.JAH07);
        system.assertEquals('a', actual.MON07);
        system.assertEquals(0, actual.AGS07);
        system.assertEquals(0, actual.VZS07);
        system.assertEquals(0, actual.AGN07);
        system.assertEquals(0, actual.VZN07);
        system.assertEquals(0, actual.ANZ07);
        system.assertEquals('a', actual.JAH08);
        system.assertEquals('a', actual.MON08);
        system.assertEquals(0, actual.AGS08);
        system.assertEquals(0, actual.VZS08);
        system.assertEquals(0, actual.AGN08);
        system.assertEquals(0, actual.VZN08);
        system.assertEquals(0, actual.ANZ08);
        system.assertEquals('a', actual.JAH09);
        system.assertEquals('a', actual.MON09);
        system.assertEquals(0, actual.AGS09);
        system.assertEquals(0, actual.VZS09);
        system.assertEquals(0, actual.AGN09);
        system.assertEquals(0, actual.VZN09);
        system.assertEquals(0, actual.ANZ09);
        system.assertEquals('a', actual.JAH10);
        system.assertEquals('a', actual.MON10);
        system.assertEquals(0, actual.AGS10);
        system.assertEquals(0, actual.VZS10);
        system.assertEquals(0, actual.AGN10);
        system.assertEquals(0, actual.VZN10);
        system.assertEquals(0, actual.ANZ10);
        system.assertEquals('a', actual.JAH11);
        system.assertEquals('a', actual.MON11);
        system.assertEquals(0, actual.AGS11);
        system.assertEquals(0, actual.VZS11);
        system.assertEquals(0, actual.AGN11);
        system.assertEquals(0, actual.VZN11);
        system.assertEquals(0, actual.ANZ11);

        sapPaymentHistory.KNB4 actual0 = new sapPaymentHistory.KNB4();
    }
    @istest
    private static void testrunQuery() {
        sapPaymentHistory request = testSetup();
        /*overcast.Query query1 = new overcast.Query();
        query1.limit_x = 10;
        query1.offset = 10;
        
        sapPaymentHistory response = request.runQuery(query1);
        system.assertEquals('a', response.KNB4[0].KUNNR);
        string requestid = request.runQueryAsync(query1, null, null, new Continuation(10));*///Commented by Sourav for Overcast uninstall
    }

    private static sapPaymentHistory testSetup() {
        //overcast.TestingUtilities.SetupTestEnvironment('sapPaymentHistory');//Commented by Sourav for Overcast uninstall
        sapPaymentHistory request = new sapPaymentHistory();
        sapPaymentHistory.KNB4 value1 = new sapPaymentHistory.KNB4();
        value1.KUNNR = 'a';
        request.KNB4.add(value1);

        string s = request.serialize();
        request.testResponse = '{"output":' + s + '}';
        return request;
    }


    @istest
    private static void TestSerialize() {
        sapPaymentHistory input = new sapPaymentHistory();
        sapPaymentHistory.KNB4 value1 = new sapPaymentHistory.KNB4();
        value1.KUNNR = 'a';
        input.KNB4.add(value1);
        sapPaymentHistory actual = (sapPaymentHistory)JSON.deserialize(input.serialize(), sapPaymentHistory.class);
        system.assertEquals('a', actual.KNB4[0].KUNNR);
    }

    @istest
    private static void TestDeserialize() {
        sapPaymentHistory output = new sapPaymentHistory();
        sapPaymentHistory.KNB4 value1 = new sapPaymentHistory.KNB4();
        value1.KUNNR = 'a';
        output.KNB4.add(value1);

        string s = output.serialize();
        sapPaymentHistory actual = sapPaymentHistory.deserialize('{"output":' + s + '}');
        system.assertEquals('a', actual.KNB4[0].KUNNR);
    }

    @istest
    private static void TestDeserializeError() {
        try {
            sapPaymentHistory actual = sapPaymentHistory.deserialize('{"error":["A test error"]}');
            system.assert(false, 'No exception thrown');
        }
        catch (sapPaymentHistory.sapPaymentHistoryException e) {
            system.assertEquals('A test error', e.getMessage());
        }
    }

    @istest
    private static void TestGetterSetter() {
        sapPaymentHistory output = new sapPaymentHistory();
        output.set('SAMPLE1', new map<string, object>{
            'FIELD1' => 'VALUE1'
        });
        
        system.assertEquals(null, output.get('NOVAL'));
        
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));       
    }
    
    @istest
    private static void TestLoadAsyncResponse() {
        sapPaymentHistory output = new sapPaymentHistory();
        output.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        system.assertEquals(null, output.get('NOVAL'));
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));
    }

    @istest
    private static void TestGetMetadata() {
        sapPaymentHistory output = new sapPaymentHistory();
        /*map<string, overcast.TypeInfo> metadata = output.getMetadata();
        
        set<string> keys = metadata.keySet();
        system.assert(keys.contains('KNB4'));
        
        overcast.TypeInfo first = metadata.get(output.getTopTypeName());
        system.assertNotEquals(null, first);
        system.assertEquals('KNB4', first.name);*/ //Commented by Sourav for Overcast uninstall
    }
}