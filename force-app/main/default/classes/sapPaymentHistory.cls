global class sapPaymentHistory {//implements overcast.Realtime.Queryable {//Commented by Sourav for Overcast uninstall
/* 
 * Generated by Overcast UTC 2020-01-05 06:44:28Z.
 * Changes to this class may cause incorrect behavior and will be lost if the scenario is re-activated.
 */
    public class sapPaymentHistoryException extends Exception {}
    
    global sapPaymentHistory() {
        this.KNB4 = new list<sapPaymentHistory.KNB4>();
    }

    public class KNB4 {
        @AuraEnabled public String KUNNR { get; set; }
        @AuraEnabled public String BUKRS { get; set; }
        @AuraEnabled public String JAH01 { get; set; }
        @AuraEnabled public String MON01 { get; set; }
        @AuraEnabled public Decimal AGS01 { get; set; }
        @AuraEnabled public Decimal VZS01 { get; set; }
        @AuraEnabled public Decimal AGN01 { get; set; }
        @AuraEnabled public Decimal VZN01 { get; set; }
        @AuraEnabled public Decimal ANZ01 { get; set; }
        @AuraEnabled public String JAH02 { get; set; }
        @AuraEnabled public String MON02 { get; set; }
        @AuraEnabled public Decimal AGS02 { get; set; }
        @AuraEnabled public Decimal VZS02 { get; set; }
        @AuraEnabled public Decimal AGN02 { get; set; }
        @AuraEnabled public Decimal VZN02 { get; set; }
        @AuraEnabled public Decimal ANZ02 { get; set; }
        @AuraEnabled public String JAH03 { get; set; }
        @AuraEnabled public String MON03 { get; set; }
        @AuraEnabled public Decimal AGS03 { get; set; }
        @AuraEnabled public Decimal VZS03 { get; set; }
        @AuraEnabled public Decimal AGN03 { get; set; }
        @AuraEnabled public Decimal VZN03 { get; set; }
        @AuraEnabled public Decimal ANZ03 { get; set; }
        @AuraEnabled public String JAH04 { get; set; }
        @AuraEnabled public String MON04 { get; set; }
        @AuraEnabled public Decimal AGS04 { get; set; }
        @AuraEnabled public Decimal VZS04 { get; set; }
        @AuraEnabled public Decimal AGN04 { get; set; }
        @AuraEnabled public Decimal VZN04 { get; set; }
        @AuraEnabled public Decimal ANZ04 { get; set; }
        @AuraEnabled public String JAH05 { get; set; }
        @AuraEnabled public String MON05 { get; set; }
        @AuraEnabled public Decimal AGS05 { get; set; }
        @AuraEnabled public Decimal VZS05 { get; set; }
        @AuraEnabled public Decimal AGN05 { get; set; }
        @AuraEnabled public Decimal VZN05 { get; set; }
        @AuraEnabled public Decimal ANZ05 { get; set; }
        @AuraEnabled public String JAH06 { get; set; }
        @AuraEnabled public String MON06 { get; set; }
        @AuraEnabled public Decimal AGS06 { get; set; }
        @AuraEnabled public Decimal VZS06 { get; set; }
        @AuraEnabled public Decimal AGN06 { get; set; }
        @AuraEnabled public Decimal VZN06 { get; set; }
        @AuraEnabled public Decimal ANZ06 { get; set; }
        @AuraEnabled public String JAH07 { get; set; }
        @AuraEnabled public String MON07 { get; set; }
        @AuraEnabled public Decimal AGS07 { get; set; }
        @AuraEnabled public Decimal VZS07 { get; set; }
        @AuraEnabled public Decimal AGN07 { get; set; }
        @AuraEnabled public Decimal VZN07 { get; set; }
        @AuraEnabled public Decimal ANZ07 { get; set; }
        @AuraEnabled public String JAH08 { get; set; }
        @AuraEnabled public String MON08 { get; set; }
        @AuraEnabled public Decimal AGS08 { get; set; }
        @AuraEnabled public Decimal VZS08 { get; set; }
        @AuraEnabled public Decimal AGN08 { get; set; }
        @AuraEnabled public Decimal VZN08 { get; set; }
        @AuraEnabled public Decimal ANZ08 { get; set; }
        @AuraEnabled public String JAH09 { get; set; }
        @AuraEnabled public String MON09 { get; set; }
        @AuraEnabled public Decimal AGS09 { get; set; }
        @AuraEnabled public Decimal VZS09 { get; set; }
        @AuraEnabled public Decimal AGN09 { get; set; }
        @AuraEnabled public Decimal VZN09 { get; set; }
        @AuraEnabled public Decimal ANZ09 { get; set; }
        @AuraEnabled public String JAH10 { get; set; }
        @AuraEnabled public String MON10 { get; set; }
        @AuraEnabled public Decimal AGS10 { get; set; }
        @AuraEnabled public Decimal VZS10 { get; set; }
        @AuraEnabled public Decimal AGN10 { get; set; }
        @AuraEnabled public Decimal VZN10 { get; set; }
        @AuraEnabled public Decimal ANZ10 { get; set; }
        @AuraEnabled public String JAH11 { get; set; }
        @AuraEnabled public String MON11 { get; set; }
        @AuraEnabled public Decimal AGS11 { get; set; }
        @AuraEnabled public Decimal VZS11 { get; set; }
        @AuraEnabled public Decimal AGN11 { get; set; }
        @AuraEnabled public Decimal VZN11 { get; set; }
        @AuraEnabled public Decimal ANZ11 { get; set; }

        public KNB4() {}

        public KNB4(String pKUNNR, String pBUKRS, String pJAH01, String pMON01, Decimal pAGS01, Decimal pVZS01, Decimal pAGN01, Decimal pVZN01, Decimal pANZ01, String pJAH02, String pMON02, Decimal pAGS02, Decimal pVZS02, Decimal pAGN02, Decimal pVZN02, Decimal pANZ02, String pJAH03, String pMON03, Decimal pAGS03, Decimal pVZS03, Decimal pAGN03, Decimal pVZN03, Decimal pANZ03, String pJAH04, String pMON04, Decimal pAGS04, Decimal pVZS04, Decimal pAGN04, Decimal pVZN04, Decimal pANZ04, String pJAH05, String pMON05) {
            this.KUNNR = pKUNNR;
            this.BUKRS = pBUKRS;
            this.JAH01 = pJAH01;
            this.MON01 = pMON01;
            this.AGS01 = pAGS01;
            this.VZS01 = pVZS01;
            this.AGN01 = pAGN01;
            this.VZN01 = pVZN01;
            this.ANZ01 = pANZ01;
            this.JAH02 = pJAH02;
            this.MON02 = pMON02;
            this.AGS02 = pAGS02;
            this.VZS02 = pVZS02;
            this.AGN02 = pAGN02;
            this.VZN02 = pVZN02;
            this.ANZ02 = pANZ02;
            this.JAH03 = pJAH03;
            this.MON03 = pMON03;
            this.AGS03 = pAGS03;
            this.VZS03 = pVZS03;
            this.AGN03 = pAGN03;
            this.VZN03 = pVZN03;
            this.ANZ03 = pANZ03;
            this.JAH04 = pJAH04;
            this.MON04 = pMON04;
            this.AGS04 = pAGS04;
            this.VZS04 = pVZS04;
            this.AGN04 = pAGN04;
            this.VZN04 = pVZN04;
            this.ANZ04 = pANZ04;
            this.JAH05 = pJAH05;
            this.MON05 = pMON05;
        }
    }

    @AuraEnabled public list<sapPaymentHistory.KNB4> KNB4 { get; set; }

    public string inputSetName { get; set; }
/*
    public sapPaymentHistory runQuery(overcast.Query query) {
        overcast.Logger logger1 = createLogger();
        try {
            sapPaymentHistory response = this.runQuery(query, logger1, null);
            logger1.commitToDatabase();
            return response;
        }
        catch (Exception e) {
            logger1.addLog('ERROR', e.getTypeName() + ': ' + e.getMessage());
            logger1.setStatusCode(300);
            logger1.commitToDatabase();
            throw e;
        }
    }

    public sapPaymentHistory runQuery(overcast.Query query, overcast.Logger logger, string namedCredential) {
        return run(overcast.SynchronousHandler.OperationType.EpgwSelect, query, logger, namedCredential);
    }

    public string runQueryAsync(overcast.Query query, overcast.Logger logger, string namedCredential, Continuation con) {
        return runAsync(overcast.SynchronousHandler.OperationType.EpgwSelect, query, logger, namedCredential, con);
    }*///Commented by Sourav for Overcast uninstall

    public static sapPaymentHistory getAsyncResponse(String requestLabel) {
        HttpResponse response = Continuation.getResponse(requestLabel);
        return sapPaymentHistory.deserialize(response.getBody());
    }
/*
    private overcast.SynchronousHandler setup(overcast.SynchronousHandler.OperationType operation, overcast.Query query, overcast.Logger logger, string namedCredential) {
        overcast.SynchronousHandler sh = overcast.SynchronousHandler.CreateFromName('sapPaymentHistory');
        if (!String.isBlank(this.inputSetName)) {
            sh.CorrelationId = this.inputSetName;
        }
        sh.InputJson = this.serialize();
        sh.NamedCredential = namedCredential;
        if (logger != null) {
            logger.setInputSetName(sh.CorrelationId);
        }
        sh.Operation = operation;

        if (query != null) {
            sh.Condition = query.where_x;
            sh.Fields = query.fields;
            sh.Limit_x = query.limit_x;
            sh.Offset = query.offset;
        }
        return sh;
    }
    
    private sapPaymentHistory run(overcast.SynchronousHandler.OperationType operation, overcast.Query query, overcast.Logger logger, string namedCredential) {
        overcast.SynchronousHandler sh = setup(operation, query, logger, namedCredential);

        if (Test.isRunningTest()) {
            if (this.dynamicBody != null) {
                return this;
            }
            return sapPaymentHistory.deserialize(this.testResponse);
        }
        overcast.EpgwController.ExecuteScenarioSynchronously(sh, logger);

        return sapPaymentHistory.deserialize(sh.Response);
    }

    private string runAsync(overcast.SynchronousHandler.OperationType operation, overcast.Query query, overcast.Logger logger, string namedCredential, Continuation con) {
        overcast.SynchronousHandler sh = setup(operation, query, logger, namedCredential);

        sh.ContinuationWebRequest = new HttpRequest();

        overcast.EpgwController.ExecuteScenarioSynchronously(sh, logger);

        return con.addHttpRequest(sh.ContinuationWebRequest);
    }
        
    private overcast.Logger createLogger() {
        return new overcast.Logger('sapPaymentHistory');
    }*///Commented by Sourav for Overcast uninstall

    public string getBackendMessage() {
        return this.backendMessage;
    }

    global string serialize() {
        if (dynamicBody != null) {
            return JSON.serialize(dynamicBody, true);
        }
        return JSON.serialize(this, true);
    }
    
    public static sapPaymentHistory deserialize(string responsedata) {
        map<string, string> m = getOutputData(responsedata);
        string outputData = m.get('output');
        string backendMessage = m.get('backendMessage');
        if (outputData == null) {
            return new sapPaymentHistory();
        }
        sapPaymentHistory obj = (sapPaymentHistory)JSON.deserialize(outputData, sapPaymentHistory.class);
        obj.outputData = outputData;
        obj.backendMessage = backendMessage;

        return obj;
    }

    private static map<string, string> getOutputData(string responseData) {
        if (string.isblank(responsedata)) {
            throw new sapPaymentHistoryException('Response null for sapPaymentHistory request.');
        }

        map<string, string> m = new map<string, string>();

        JSONParser jresponse = JSON.createParser(responsedata);
        jresponse.nextValue();

        boolean hasOutput = false;
        while (jresponse.nextValue() != JSONToken.END_OBJECT && jresponse.getCurrentToken() != null) {
            if (jresponse.getCurrentName() == 'output') {
                jresponse.skipChildren();
                hasOutput = true;
                continue;
            }
            if (jresponse.getCurrentName() == 'backendMessage') {
                m.put('backendMessage', (string)jresponse.readValueAs(string.class));
                continue;
            }
            if (jresponse.getCurrentName() == 'error') {
                string[] errors = (string[])jresponse.readValueAs(list<string>.class);
                throw new sapPaymentHistoryException(string.join(errors, ';'));
            }
        }
        if (!hasOutput) {
            throw new sapPaymentHistoryException('Malformed response for sapPaymentHistory request.');
        }
        integer start = responsedata.indexOf(':') + 1;
        integer lastIndex = m.get('backendMessage') == null
            ? responsedata.length() - 2
            : responsedata.lastIndexOf('backendMessage');
        integer finish = responsedata.lastIndexOf('}', lastIndex) + 1;
        m.put('output', responseData.substring(start, finish));
        return m;
    }


    public transient string testResponse;
    private transient string outputData;
    private transient string backendMessage;

    //private transient map<string, overcast.TypeInfo> metadata;//Commented by Sourav for Overcast uninstall
    private transient map<string, object> dynamicBody;

    global void loadAsyncResponse(string responseBody) {
        map<string, string> m = getOutputData(responseBody);
        outputData = m.get('output');
        backendMessage = m.get('backendMessage');
        
        if (outputData != null) {
            dynamicBody = (map<string, object>)JSON.deserializeUntyped(outputData);
        }
    }

    global string getTopTypeName() {
        return 'KNB4';
    }

    global void set(string typeName, object records) {
        if (typeName == '@testResponse') {
            dynamicBody = (map<string, object>)records;
            return;
        }
        if (dynamicBody == null) {
            dynamicBody = new map<string, object>();
        }
        
        dynamicBody.put(typeName, records);
    }
    
    global object get(string typeName) {
        if (dynamicBody == null && outputData != null) {
            dynamicBody = (map<string, object>)JSON.deserializeUntyped(outputData);
        }
        if (dynamicBody == null) { 
            return null;
        }
        return dynamicBody.get(typeName);
    }

    /*global map<string, overcast.TypeInfo> getMetadata() {
        if (metadata == null) {
            metadata = new Map<String, overcast.TypeInfo>();
            metadata.putAll(sapPaymentHistoryMeta0.metadata);
        }
        return metadata;
    }*///Commented by Sourav for Overcast uninstall

}