// This class allows advanced customizations for the mapping of records from ApplixAssetsData_Ov_assets_for_account__c to Applix_Assets__c.
//
// Scenario: ApplixAssetsData
// Source Object: ApplixAssetsData_Ov_assets_for_account__c
// Target Object: Applix_Assets__c
// Mapping Record Name: ApplixAssetsMap
// Direction: Inbound
// 
// Generated by Overcast 2019-01-02 18:55:55Z
// Your changes will not be overwritten when resaving the mapping.
//
global class Mapping_ApplixAssetsMap {//implements overcast.ObjectMapping.EventPlugin, overcast.ObjectMapping.BatchableEventPlugin {//Commented by Sourav for Overcast uninstall
    
//========================================Custom Code To Map Applix Assets with Accounts -- Sambhavi Amarapalli --- Start==============================
    private Map<String, String> mapApplixAccountToAccountID = new Map<String, String>();
//==============================================Custom Code To Map Applix Assets with Accounts -- Sambhavi Amarapalli --- End===========================
/*
    global void execute(overcast__Run__c scenarioExecution, ApplixAssetsData_Ov_assets_for_account__c[] records) {
        overcast.EpgwController.MappingConfig config = new overcast.EpgwController.MappingConfig('ApplixAssetsData_Ov_assets_for_account__c', records);
        config.rollbackOnError = true;
        config.eventplugin = this;
        config.mappings = [SELECT overcast__Target__c, overcast__Map__c, overcast__Joins__c
                    FROM overcast__IntegrationFieldMap__c 
                    WHERE overcast__ApexClass__c = 'Mapping_ApplixAssetsMap'];

        m_logger = new overcast.Logger(scenarioExecution.Id);
        
 //===================================Custom Code To Map Applix Assets with Accounts -- Sambhavi Amarapalli --- Start===================================
        
        Set<String> setApplixNumber = new Set<String>();
        for (ApplixAssetsData_Ov_assets_for_account__c aa : records) {
            setApplixNumber.add(aa.Account_ID__c); 
        }
        for(Account objAccount : [SELECT Id, Name, Applix_Account__c FROm Account WHERE Applix_Account__c IN: setApplixNumber]){
            mapApplixAccountToAccountID.put(objAccount.Applix_Account__c, objAccount.Id);
        }
        
//====================================Custom Code To Map Applix Assets with Accounts -- Sambhavi Amarapalli --- End===================================

        overcast.EpgwController.RunMappingTrigger(config);

        this.saveLogs();
    }

    // Begin ObjectMapping.EventPlugin interface implementation

    // BeforeUpsert Is called for each record that will be inserted/updated into the target object.
    // If the target record has an ID it will be updated, otherwise inserted.
    // Return true to accept the record for insert/update. False to reject the record.
    global boolean beforeUpsert(sobject sourceRecord, sobject targetRecord) {
        
//================================================Custom Changes for Applix Assets Mapping -- Start====================================================
       
        ApplixAssetsData_Ov_assets_for_account__c source = (ApplixAssetsData_Ov_assets_for_account__c) sourceRecord;
        Applix_Assets__c target = (Applix_Assets__c)targetRecord;
        if(source.Account_ID__c != null && mapApplixAccountToAccountID.containsKey(source.Account_ID__c) && mapApplixAccountToAccountID.get(source.Account_ID__c) != null){
            logInfo('Mapping record with Applix ID [' + source.Account_ID__c + ']');
            target.Account__c = mapApplixAccountToAccountID.get(source.Account_ID__c);
            return true;
        }
        
        logWarning('Skipping record with Applix ID [' + source.Account_ID__c + ']');
        return false;
        
 //=============================================Custom Changesfor Applix Assets Mapping -- End ===========================================
        
    }
    
    // AfterInsert Is called after both insert And update DML operations are successfull. 
    // If rollbackOnError Is true And a DML exception occurs when inserting Or updating, the transaction Is rolled back And AfterInsert Is Not called.
    // If rollbackOnError Is false And a DML exception occurs when inserting Or updating, AfterInsert Is called And saveResults will contain the error messages.
    global void afterInsert(sobject[] insertedRecords, Database.SaveResult[] saveResults) { 
        for (Database.Saveresult r : saveResults) {
            if (!r.isSuccess()) {
                logWarning(r.getErrors()[0].getMessage());
                setStatusToWarning();
            }
        }
    }
    
    // AfterUpdate Is called after both insert And update DML operations are successfull. 
    // If rollbackOnError Is true And a DML exception occurs when inserting Or updating, the transaction Is rolled back And AfterUpdate Is Not called.
    // If rollbackOnError Is false And a DML exception occurs when inserting Or updating, AfterUpdate Is called And saveResults will contain the error messages.
    global void afterUpdate(sobject[] updatedRecords, Database.SaveResult[] saveResults) {  
        for (Database.Saveresult r : saveResults) {
            if (!r.isSuccess()) {
                logWarning(r.getErrors()[0].getMessage());
                setStatusToWarning();
            }
        }
    }

    // End of interface implementation
        
    // Begin helper methods
        
    // Log an error message to the scenario execution log
    global void logError(String message) {
        m_logger.addLog('ERROR', '[Mapping_ApplixAssetsMap] ' + message);
    }
    
    // Log an warning message to the scenario execution log
    global void logWarning(String message) {
        m_logger.addLog('WARN', '[Mapping_ApplixAssetsMap] ' + message);
    }
    
    // Log an info message to the scenario execution log
    global void logInfo(String message) {
        m_logger.addLog('INFO', '[Mapping_ApplixAssetsMap] ' + message);
    }

    // Log a debug message to the scenario execution log
    global void logDebug(String message) {
        m_logger.addLog('DEBUG', '[Mapping_ApplixAssetsMap] ' + message);
    }
    
    // Set the scenario execution status to error
    global void setStatusToError() {
        m_logger.setStatusCode(400);
    }
    
    // Set the scenario execution status to warning
    global void setStatusToWarning() {
        m_logger.setStatusCode(500);
    }
    
    global void saveLogs() {
        m_logger.commitToDatabase();
    }
    
    // End helper methods

    @testvisible
    private overcast.Logger m_logger;*///Commented by Sourav for Overcast uninstall
}