/* 
 * Generated by Overcast UTC 2020-01-05 06:38:42Z.
 * Changes to this class may cause incorrect behavior and will be lost if the scenario is re-activated.
 */
@istest
private class ZCSNCREATEUPDATETest {
    @istest
    private static void testZCSNCREATEUPDATE() {
        ZCSNCREATEUPDATE actual = new ZCSNCREATEUPDATE();
        //system.assertNotEquals(null, actual.ZCUSTOMER_CREATE_OVERCAST);//Commented by Sourav for Overcast uninstall
        //system.assertNotEquals(null, actual.O_KNA1);
        /*system.assertNotEquals(null, actual.I_BAPIADDR1);
        system.assertNotEquals(null, actual.I_KNA1);
        system.assertNotEquals(null, actual.I_KNVI);
        system.assertNotEquals(null, actual.I_KNVP);
        system.assertNotEquals(null, actual.I_KNVV);
        system.assertNotEquals(null, actual.RETURN_x);*/
    }

    @istest
    private static void TestZCUSTOMER_CREATE_OVERCAST() {
        /*ZCSNCREATEUPDATE.ZCUSTOMER_CREATE_OVERCAST actual = new ZCSNCREATEUPDATE.ZCUSTOMER_CREATE_OVERCAST('a');

        system.assertEquals('a', actual.E_KUNNR);

        ZCSNCREATEUPDATE.ZCUSTOMER_CREATE_OVERCAST actual0 = new ZCSNCREATEUPDATE.ZCUSTOMER_CREATE_OVERCAST();*///Commented by Sourav for Overcast uninstall
    }
    @istest
    private static void TestO_KNA1() {
        ZCSNCREATEUPDATE.O_KNA1 actual = new ZCSNCREATEUPDATE.O_KNA1('a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a',Date.newInstance(2000,1,1),'a','a','a','a');

        actual.KNAZK = 'a';
        actual.KNRZA = 'a';
        actual.KONZS = 'a';
        actual.KTOKD = 'a';
        actual.KUKLA = 'a';
        actual.LIFNR = 'a';
        actual.LIFSD = 'a';
        actual.LOCCO = 'a';
        actual.LOEVM = 'a';
        actual.NAME3 = 'a';
        actual.NAME4 = 'a';
        actual.NIELS = 'a';
        actual.ORT02 = 'a';
        actual.PFACH = 'a';
        actual.PSTL2 = 'a';
        actual.COUNC = 'a';
        actual.CITYC = 'a';
        actual.RPMKR = 'a';
        actual.SPERR = 'a';
        actual.SPRAS = 'a';
        actual.STCD1 = 'a';
        actual.STCD2 = 'a';
        actual.STKZA = 'a';
        actual.STKZU = 'a';
        actual.TELBX = 'a';
        actual.TELF2 = 'a';
        actual.TELTX = 'a';
        actual.TELX1 = 'a';
        actual.LZONE = 'a';
        actual.XZEMP = 'a';
        actual.VBUND = 'a';
        actual.STCEG = 'a';
        actual.DEAR1 = 'a';
        actual.DEAR2 = 'a';
        actual.DEAR3 = 'a';
        actual.DEAR4 = 'a';
        actual.DEAR5 = 'a';
        actual.GFORM = 'a';
        actual.BRAN1 = 'a';
        actual.BRAN2 = 'a';
        actual.BRAN3 = 'a';
        actual.BRAN4 = 'a';
        actual.BRAN5 = 'a';
        actual.EKONT = 'a';
        actual.UMSAT = 0;
        actual.UMJAH = 'a';
        actual.UWAER = 'a';
        actual.JMZAH = 'a';
        actual.JMJAH = 'a';
        actual.KATR1 = 'a';
        actual.KATR2 = 'a';
        actual.KATR3 = 'a';
        actual.KATR4 = 'a';
        actual.KATR5 = 'a';
        actual.KATR6 = 'a';
        actual.KATR7 = 'a';
        actual.KATR8 = 'a';
        actual.KATR9 = 'a';
        actual.KATR10 = 'a';
        actual.STKZN = 'a';
        actual.UMSA1 = 0;
        actual.TXJCD = 'a';
        actual.PERIV = 'a';
        actual.ABRVW = 'a';
        actual.INSPBYDEBI = 'a';
        actual.INSPATDEBI = 'a';
        actual.KTOCD = 'a';
        actual.PFORT = 'a';
        actual.WERKS = 'a';
        actual.DTAMS = 'a';
        actual.DTAWS = 'a';
        actual.DUEFL = 'a';
        actual.HZUOR = 'a';
        actual.SPERZ = 'a';
        actual.ETIKG = 'a';
        actual.CIVVE = 'a';
        actual.MILVE = 'a';
        actual.KDKG1 = 'a';
        actual.KDKG2 = 'a';
        actual.KDKG3 = 'a';
        actual.KDKG4 = 'a';
        actual.KDKG5 = 'a';
        actual.XKNZA = 'a';
        actual.FITYP = 'a';
        actual.STCDT = 'a';
        actual.STCD3 = 'a';
        actual.STCD4 = 'a';
        actual.STCD5 = 'a';
        actual.XICMS = 'a';
        actual.XXIPI = 'a';
        actual.XSUBT = 'a';
        actual.CFOPC = 'a';
        actual.TXLW1 = 'a';
        actual.TXLW2 = 'a';
        actual.CCC01 = 'a';
        actual.CCC02 = 'a';
        actual.CCC03 = 'a';
        actual.CCC04 = 'a';
        actual.CASSD = 'a';
        actual.KNURL = 'a';
        actual.J_1KFREPRE = 'a';
        actual.J_1KFTBUS = 'a';
        actual.J_1KFTIND = 'a';
        actual.CONFS = 'a';
        actual.UPDAT = Date.newInstance(2000,1,1);
        actual.UPTIM = 'a';
        actual.NODEL = 'a';
        actual.DEAR6 = 'a';
        actual.x_VSO_R_PALHGT = 0;
        actual.x_VSO_R_PAL_UL = 'a';
        actual.x_VSO_R_PK_MAT = 'a';
        actual.x_VSO_R_MATPAL = 'a';
        actual.x_VSO_R_I_NO_LYR = 'a';
        actual.x_VSO_R_ONE_MAT = 'a';
        actual.x_VSO_R_ONE_SORT = 'a';
        actual.x_VSO_R_ULD_SIDE = 'a';
        actual.x_VSO_R_LOAD_PREF = 'a';
        actual.x_VSO_R_DPOINT = 'a';
        actual.ALC = 'a';
        actual.PMT_OFFICE = 'a';
        actual.PSOFG = 'a';
        actual.PSOIS = 'a';
        actual.PSON1 = 'a';
        actual.PSON2 = 'a';
        actual.PSON3 = 'a';
        actual.PSOVN = 'a';
        actual.PSOTL = 'a';
        actual.PSOHS = 'a';
        actual.PSOST = 'a';
        actual.PSOO1 = 'a';
        actual.PSOO2 = 'a';
        actual.PSOO3 = 'a';
        actual.PSOO4 = 'a';
        actual.PSOO5 = 'a';
        actual.ZZFLD000004 = 'a';
        actual.ZZZNATURE = 'a';
        actual.ZZREGOFBUS = 'a';
        actual.ZZSALESFORCE_ID = 'a';
        actual.SFGUID = 'a';
        actual.ZZMASTERAGRE = 'a';
        actual.ZROLE = 'a';
        system.assertEquals('a', actual.MANDT);
        system.assertEquals('a', actual.KUNNR);
        system.assertEquals('a', actual.LAND1);
        system.assertEquals('a', actual.NAME1);
        system.assertEquals('a', actual.NAME2);
        system.assertEquals('a', actual.ORT01);
        system.assertEquals('a', actual.PSTLZ);
        system.assertEquals('a', actual.REGIO);
        system.assertEquals('a', actual.SORTL);
        system.assertEquals('a', actual.STRAS);
        system.assertEquals('a', actual.TELF1);
        system.assertEquals('a', actual.TELFX);
        system.assertEquals('a', actual.XCPDK);
        system.assertEquals('a', actual.ADRNR);
        system.assertEquals('a', actual.MCOD1);
        system.assertEquals('a', actual.MCOD2);
        system.assertEquals('a', actual.MCOD3);
        system.assertEquals('a', actual.ANRED);
        system.assertEquals('a', actual.AUFSD);
        system.assertEquals('a', actual.BAHNE);
        system.assertEquals('a', actual.BAHNS);
        system.assertEquals('a', actual.BBBNR);
        system.assertEquals('a', actual.BBSNR);
        system.assertEquals('a', actual.BEGRU);
        system.assertEquals('a', actual.BRSCH);
        system.assertEquals('a', actual.BUBKZ);
        system.assertEquals('a', actual.DATLT);
        system.assertEquals(Date.newInstance(2000,1,1), actual.ERDAT);
        system.assertEquals('a', actual.ERNAM);
        system.assertEquals('a', actual.EXABL);
        system.assertEquals('a', actual.FAKSD);
       // system.assertEquals('a', actual.FISKN);
        system.assertEquals('a', actual.KNAZK);
        system.assertEquals('a', actual.KNRZA);
        system.assertEquals('a', actual.KONZS);
        system.assertEquals('a', actual.KTOKD);
        system.assertEquals('a', actual.KUKLA);
        system.assertEquals('a', actual.LIFNR);
        system.assertEquals('a', actual.LIFSD);
        system.assertEquals('a', actual.LOCCO);
        system.assertEquals('a', actual.LOEVM);
        system.assertEquals('a', actual.NAME3);
        system.assertEquals('a', actual.NAME4);
        system.assertEquals('a', actual.NIELS);
        system.assertEquals('a', actual.ORT02);
        system.assertEquals('a', actual.PFACH);
        system.assertEquals('a', actual.PSTL2);
        system.assertEquals('a', actual.COUNC);
        system.assertEquals('a', actual.CITYC);
        system.assertEquals('a', actual.RPMKR);
        system.assertEquals('a', actual.SPERR);
        system.assertEquals('a', actual.SPRAS);
        system.assertEquals('a', actual.STCD1);
        system.assertEquals('a', actual.STCD2);
        system.assertEquals('a', actual.STKZA);
        system.assertEquals('a', actual.STKZU);
        system.assertEquals('a', actual.TELBX);
        system.assertEquals('a', actual.TELF2);
        system.assertEquals('a', actual.TELTX);
        system.assertEquals('a', actual.TELX1);
        system.assertEquals('a', actual.LZONE);
        system.assertEquals('a', actual.XZEMP);
        system.assertEquals('a', actual.VBUND);
        system.assertEquals('a', actual.STCEG);
        system.assertEquals('a', actual.DEAR1);
        system.assertEquals('a', actual.DEAR2);
        system.assertEquals('a', actual.DEAR3);
        system.assertEquals('a', actual.DEAR4);
        system.assertEquals('a', actual.DEAR5);
        system.assertEquals('a', actual.GFORM);
        system.assertEquals('a', actual.BRAN1);
        system.assertEquals('a', actual.BRAN2);
        system.assertEquals('a', actual.BRAN3);
        system.assertEquals('a', actual.BRAN4);
        system.assertEquals('a', actual.BRAN5);
        system.assertEquals('a', actual.EKONT);
        system.assertEquals(0, actual.UMSAT);
        system.assertEquals('a', actual.UMJAH);
        system.assertEquals('a', actual.UWAER);
        system.assertEquals('a', actual.JMZAH);
        system.assertEquals('a', actual.JMJAH);
        system.assertEquals('a', actual.KATR1);
        system.assertEquals('a', actual.KATR2);
        system.assertEquals('a', actual.KATR3);
        system.assertEquals('a', actual.KATR4);
        system.assertEquals('a', actual.KATR5);
        system.assertEquals('a', actual.KATR6);
        system.assertEquals('a', actual.KATR7);
        system.assertEquals('a', actual.KATR8);
        system.assertEquals('a', actual.KATR9);
        system.assertEquals('a', actual.KATR10);
        system.assertEquals('a', actual.STKZN);
        system.assertEquals(0, actual.UMSA1);
        system.assertEquals('a', actual.TXJCD);
        system.assertEquals('a', actual.PERIV);
        system.assertEquals('a', actual.ABRVW);
        system.assertEquals('a', actual.INSPBYDEBI);
        system.assertEquals('a', actual.INSPATDEBI);
        system.assertEquals('a', actual.KTOCD);
        system.assertEquals('a', actual.PFORT);
        system.assertEquals('a', actual.WERKS);
        system.assertEquals('a', actual.DTAMS);
        system.assertEquals('a', actual.DTAWS);
        system.assertEquals('a', actual.DUEFL);
        system.assertEquals('a', actual.HZUOR);
        system.assertEquals('a', actual.SPERZ);
        system.assertEquals('a', actual.ETIKG);
        system.assertEquals('a', actual.CIVVE);
        system.assertEquals('a', actual.MILVE);
        system.assertEquals('a', actual.KDKG1);
        system.assertEquals('a', actual.KDKG2);
        system.assertEquals('a', actual.KDKG3);
        system.assertEquals('a', actual.KDKG4);
        system.assertEquals('a', actual.KDKG5);
        system.assertEquals('a', actual.XKNZA);
        system.assertEquals('a', actual.FITYP);
        system.assertEquals('a', actual.STCDT);
        system.assertEquals('a', actual.STCD3);
        system.assertEquals('a', actual.STCD4);
        system.assertEquals('a', actual.STCD5);
        system.assertEquals('a', actual.XICMS);
        system.assertEquals('a', actual.XXIPI);
        system.assertEquals('a', actual.XSUBT);
        system.assertEquals('a', actual.CFOPC);
        system.assertEquals('a', actual.TXLW1);
        system.assertEquals('a', actual.TXLW2);
        system.assertEquals('a', actual.CCC01);
        system.assertEquals('a', actual.CCC02);
        system.assertEquals('a', actual.CCC03);
        system.assertEquals('a', actual.CCC04);
        system.assertEquals('a', actual.CASSD);
        system.assertEquals('a', actual.KNURL);
        system.assertEquals('a', actual.J_1KFREPRE);
        system.assertEquals('a', actual.J_1KFTBUS);
        system.assertEquals('a', actual.J_1KFTIND);
        system.assertEquals('a', actual.CONFS);
        system.assertEquals(Date.newInstance(2000,1,1), actual.UPDAT);
        system.assertEquals('a', actual.UPTIM);
        system.assertEquals('a', actual.NODEL);
        system.assertEquals('a', actual.DEAR6);
        system.assertEquals(0, actual.x_VSO_R_PALHGT);
        system.assertEquals('a', actual.x_VSO_R_PAL_UL);
        system.assertEquals('a', actual.x_VSO_R_PK_MAT);
        system.assertEquals('a', actual.x_VSO_R_MATPAL);
        system.assertEquals('a', actual.x_VSO_R_I_NO_LYR);
        system.assertEquals('a', actual.x_VSO_R_ONE_MAT);
        system.assertEquals('a', actual.x_VSO_R_ONE_SORT);
        system.assertEquals('a', actual.x_VSO_R_ULD_SIDE);
        system.assertEquals('a', actual.x_VSO_R_LOAD_PREF);
        system.assertEquals('a', actual.x_VSO_R_DPOINT);
        system.assertEquals('a', actual.ALC);
        system.assertEquals('a', actual.PMT_OFFICE);
        system.assertEquals('a', actual.PSOFG);
        system.assertEquals('a', actual.PSOIS);
        system.assertEquals('a', actual.PSON1);
        system.assertEquals('a', actual.PSON2);
        system.assertEquals('a', actual.PSON3);
        system.assertEquals('a', actual.PSOVN);
        system.assertEquals('a', actual.PSOTL);
        system.assertEquals('a', actual.PSOHS);
        system.assertEquals('a', actual.PSOST);
        system.assertEquals('a', actual.PSOO1);
        system.assertEquals('a', actual.PSOO2);
        system.assertEquals('a', actual.PSOO3);
        system.assertEquals('a', actual.PSOO4);
        system.assertEquals('a', actual.PSOO5);
        system.assertEquals('a', actual.ZZFLD000004);
        system.assertEquals('a', actual.ZZZNATURE);
        system.assertEquals('a', actual.ZZREGOFBUS);
        system.assertEquals('a', actual.ZZSALESFORCE_ID);
        system.assertEquals('a', actual.SFGUID);
        system.assertEquals('a', actual.ZZMASTERAGRE);
        system.assertEquals('a', actual.ZROLE);

        ZCSNCREATEUPDATE.O_KNA1 actual0 = new ZCSNCREATEUPDATE.O_KNA1();
    }
    @istest
    private static void TestI_BAPIADDR1() {
        ZCSNCREATEUPDATE.I_BAPIADDR1 actual = new ZCSNCREATEUPDATE.I_BAPIADDR1('a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a');

        actual.TAXJURCODE = 'a';
        actual.ADR_NOTES = 'a';
        actual.COMM_TYPE = 'a';
        actual.TEL1_NUMBR = 'a';
        actual.TEL1_EXT = 'a';
        actual.FAX_NUMBER = 'a';
        actual.FAX_EXTENS = 'a';
        actual.STREET_LNG = 'a';
        actual.DISTRCT_NO = 'a';
        actual.CHCKSTATUS = 'a';
        actual.PBOXCIT_NO = 'a';
        actual.TRANSPZONE = 'a';
        actual.HOUSE_NO2 = 'a';
        actual.E_MAIL = 'a';
        actual.STR_SUPPL3 = 'a';
        actual.TITLE = 'a';
        actual.COUNTRYISO = 'a';
        actual.LANGU_ISO = 'a';
        actual.BUILD_LONG = 'a';
        actual.REGIOGROUP = 'a';
        actual.HOME_CITY = 'a';
        actual.HOMECITYNO = 'a';
        actual.PCODE1_EXT = 'a';
        actual.PCODE2_EXT = 'a';
        actual.PCODE3_EXT = 'a';
        actual.PO_W_O_NO = 'a';
        actual.PO_BOX_REG = 'a';
        actual.POBOX_CTRY = 'a';
        actual.PO_CTRYISO = 'a';
        actual.HOMEPAGE = 'a';
        actual.DONT_USE_S = 'a';
        actual.DONT_USE_P = 'a';
        actual.HOUSE_NO3 = 'a';
        actual.LANGU_CR = 'a';
        actual.LANGUCRISO = 'a';
        actual.PO_BOX_LOBBY = 'a';
        actual.DELI_SERV_TYPE = 'a';
        actual.DELI_SERV_NUMBER = 'a';
        actual.URI_TYPE = 'a';
        actual.COUNTY_CODE = 'a';
        actual.COUNTY = 'a';
        actual.TOWNSHIP_CODE = 'a';
        actual.TOWNSHIP = 'a';
        system.assertEquals('a', actual.ADDR_NO);
        system.assertEquals('a', actual.FORMOFADDR);
        system.assertEquals('a', actual.NAME);
        system.assertEquals('a', actual.NAME_2);
        system.assertEquals('a', actual.NAME_3);
        system.assertEquals('a', actual.NAME_4);
        system.assertEquals('a', actual.C_O_NAME);
        system.assertEquals('a', actual.CITY);
        system.assertEquals('a', actual.DISTRICT);
        system.assertEquals('a', actual.CITY_NO);
        system.assertEquals('a', actual.POSTL_COD1);
        system.assertEquals('a', actual.POSTL_COD2);
        system.assertEquals('a', actual.POSTL_COD3);
        system.assertEquals('a', actual.PO_BOX);
        system.assertEquals('a', actual.PO_BOX_CIT);
        system.assertEquals('a', actual.DELIV_DIS);
        system.assertEquals('a', actual.STREET);
        system.assertEquals('a', actual.STREET_NO);
        system.assertEquals('a', actual.STR_ABBR);
        system.assertEquals('a', actual.HOUSE_NO);
        system.assertEquals('a', actual.STR_SUPPL1);
        system.assertEquals('a', actual.STR_SUPPL2);
        system.assertEquals('a', actual.LOCATION);
        system.assertEquals('a', actual.BUILDING);
        system.assertEquals('a', actual.FLOOR);
        system.assertEquals('a', actual.ROOM_NO);
        system.assertEquals('a', actual.COUNTRY);
        system.assertEquals('a', actual.LANGU);
        system.assertEquals('a', actual.REGION);
        system.assertEquals('a', actual.SORT1);
        system.assertEquals('a', actual.SORT2);
        system.assertEquals('a', actual.TIME_ZONE);
        system.assertEquals('a', actual.TAXJURCODE);
        system.assertEquals('a', actual.ADR_NOTES);
        system.assertEquals('a', actual.COMM_TYPE);
        system.assertEquals('a', actual.TEL1_NUMBR);
        system.assertEquals('a', actual.TEL1_EXT);
        system.assertEquals('a', actual.FAX_NUMBER);
        system.assertEquals('a', actual.FAX_EXTENS);
        system.assertEquals('a', actual.STREET_LNG);
        system.assertEquals('a', actual.DISTRCT_NO);
        system.assertEquals('a', actual.CHCKSTATUS);
        system.assertEquals('a', actual.PBOXCIT_NO);
        system.assertEquals('a', actual.TRANSPZONE);
        system.assertEquals('a', actual.HOUSE_NO2);
        system.assertEquals('a', actual.E_MAIL);
        system.assertEquals('a', actual.STR_SUPPL3);
        system.assertEquals('a', actual.TITLE);
        system.assertEquals('a', actual.COUNTRYISO);
        system.assertEquals('a', actual.LANGU_ISO);
        system.assertEquals('a', actual.BUILD_LONG);
        system.assertEquals('a', actual.REGIOGROUP);
        system.assertEquals('a', actual.HOME_CITY);
        system.assertEquals('a', actual.HOMECITYNO);
        system.assertEquals('a', actual.PCODE1_EXT);
        system.assertEquals('a', actual.PCODE2_EXT);
        system.assertEquals('a', actual.PCODE3_EXT);
        system.assertEquals('a', actual.PO_W_O_NO);
        system.assertEquals('a', actual.PO_BOX_REG);
        system.assertEquals('a', actual.POBOX_CTRY);
        system.assertEquals('a', actual.PO_CTRYISO);
        system.assertEquals('a', actual.HOMEPAGE);
        system.assertEquals('a', actual.DONT_USE_S);
        system.assertEquals('a', actual.DONT_USE_P);
        system.assertEquals('a', actual.HOUSE_NO3);
        system.assertEquals('a', actual.LANGU_CR);
        system.assertEquals('a', actual.LANGUCRISO);
        system.assertEquals('a', actual.PO_BOX_LOBBY);
        system.assertEquals('a', actual.DELI_SERV_TYPE);
        system.assertEquals('a', actual.DELI_SERV_NUMBER);
        system.assertEquals('a', actual.URI_TYPE);
        system.assertEquals('a', actual.COUNTY_CODE);
        system.assertEquals('a', actual.COUNTY);
        system.assertEquals('a', actual.TOWNSHIP_CODE);
        system.assertEquals('a', actual.TOWNSHIP);

        ZCSNCREATEUPDATE.I_BAPIADDR1 actual0 = new ZCSNCREATEUPDATE.I_BAPIADDR1();
    }
    @istest
    private static void TestI_KNA1() {
        ZCSNCREATEUPDATE.I_KNA1 actual = new ZCSNCREATEUPDATE.I_KNA1('a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a',Date.newInstance(2000,1,1),'a','a','a','a');

        actual.KNAZK = 'a';
        actual.KNRZA = 'a';
        actual.KONZS = 'a';
        actual.KTOKD = 'a';
        actual.KUKLA = 'a';
        actual.LIFNR = 'a';
        actual.LIFSD = 'a';
        actual.LOCCO = 'a';
        actual.LOEVM = 'a';
        actual.NAME3 = 'a';
        actual.NAME4 = 'a';
        actual.NIELS = 'a';
        actual.ORT02 = 'a';
        actual.PFACH = 'a';
        actual.PSTL2 = 'a';
        actual.COUNC = 'a';
        actual.CITYC = 'a';
        actual.RPMKR = 'a';
        actual.SPERR = 'a';
        actual.SPRAS = 'a';
        actual.STCD1 = 'a';
        actual.STCD2 = 'a';
        actual.STKZA = 'a';
        actual.STKZU = 'a';
        actual.TELBX = 'a';
        actual.TELF2 = 'a';
        actual.TELTX = 'a';
        actual.TELX1 = 'a';
        actual.LZONE = 'a';
        actual.XZEMP = 'a';
        actual.VBUND = 'a';
        actual.STCEG = 'a';
        actual.DEAR1 = 'a';
        actual.DEAR2 = 'a';
        actual.DEAR3 = 'a';
        actual.DEAR4 = 'a';
        actual.DEAR5 = 'a';
        actual.GFORM = 'a';
        actual.BRAN1 = 'a';
        actual.BRAN2 = 'a';
        actual.BRAN3 = 'a';
        actual.BRAN4 = 'a';
        actual.BRAN5 = 'a';
        actual.EKONT = 'a';
        actual.UMSAT = 0;
        actual.UMJAH = 'a';
        actual.UWAER = 'a';
        actual.JMZAH = 'a';
        actual.JMJAH = 'a';
        actual.KATR1 = 'a';
        actual.KATR2 = 'a';
        actual.KATR3 = 'a';
        actual.KATR4 = 'a';
        actual.KATR5 = 'a';
        actual.KATR6 = 'a';
        actual.KATR7 = 'a';
        actual.KATR8 = 'a';
        actual.KATR9 = 'a';
        actual.KATR10 = 'a';
        actual.STKZN = 'a';
        actual.UMSA1 = 0;
        actual.TXJCD = 'a';
        actual.PERIV = 'a';
        actual.ABRVW = 'a';
        actual.INSPBYDEBI = 'a';
        actual.INSPATDEBI = 'a';
        actual.KTOCD = 'a';
        actual.PFORT = 'a';
        actual.WERKS = 'a';
        actual.DTAMS = 'a';
        actual.DTAWS = 'a';
        actual.DUEFL = 'a';
        actual.HZUOR = 'a';
        actual.SPERZ = 'a';
        actual.ETIKG = 'a';
        actual.CIVVE = 'a';
        actual.MILVE = 'a';
        actual.KDKG1 = 'a';
        actual.KDKG2 = 'a';
        actual.KDKG3 = 'a';
        actual.KDKG4 = 'a';
        actual.KDKG5 = 'a';
        actual.XKNZA = 'a';
        actual.FITYP = 'a';
        actual.STCDT = 'a';
        actual.STCD3 = 'a';
        actual.STCD4 = 'a';
        actual.STCD5 = 'a';
        actual.XICMS = 'a';
        actual.XXIPI = 'a';
        actual.XSUBT = 'a';
        actual.CFOPC = 'a';
        actual.TXLW1 = 'a';
        actual.TXLW2 = 'a';
        actual.CCC01 = 'a';
        actual.CCC02 = 'a';
        actual.CCC03 = 'a';
        actual.CCC04 = 'a';
        actual.CASSD = 'a';
        actual.KNURL = 'a';
        actual.J_1KFREPRE = 'a';
        actual.J_1KFTBUS = 'a';
        actual.J_1KFTIND = 'a';
        actual.CONFS = 'a';
        actual.UPDAT = Date.newInstance(2000,1,1);
        actual.UPTIM = 'a';
        actual.NODEL = 'a';
        actual.DEAR6 = 'a';
        actual.x_VSO_R_PALHGT = 0;
        actual.x_VSO_R_PAL_UL = 'a';
        actual.x_VSO_R_PK_MAT = 'a';
        actual.x_VSO_R_MATPAL = 'a';
        actual.x_VSO_R_I_NO_LYR = 'a';
        actual.x_VSO_R_ONE_MAT = 'a';
        actual.x_VSO_R_ONE_SORT = 'a';
        actual.x_VSO_R_ULD_SIDE = 'a';
        actual.x_VSO_R_LOAD_PREF = 'a';
        actual.x_VSO_R_DPOINT = 'a';
        actual.ALC = 'a';
        actual.PMT_OFFICE = 'a';
        actual.PSOFG = 'a';
        actual.PSOIS = 'a';
        actual.PSON1 = 'a';
        actual.PSON2 = 'a';
        actual.PSON3 = 'a';
        actual.PSOVN = 'a';
        actual.PSOTL = 'a';
        actual.PSOHS = 'a';
        actual.PSOST = 'a';
        actual.PSOO1 = 'a';
        actual.PSOO2 = 'a';
        actual.PSOO3 = 'a';
        actual.PSOO4 = 'a';
        actual.PSOO5 = 'a';
        actual.ZZFLD000004 = 'a';
        actual.ZZZNATURE = 'a';
        actual.ZZREGOFBUS = 'a';
        actual.ZZSALESFORCE_ID = 'a';
        actual.SFGUID = 'a';
        actual.ZZMASTERAGRE = 'a';
        actual.ZROLE = 'a';
        system.assertEquals('a', actual.MANDT);
        system.assertEquals('a', actual.KUNNR);
        system.assertEquals('a', actual.LAND1);
        system.assertEquals('a', actual.NAME1);
        system.assertEquals('a', actual.NAME2);
        system.assertEquals('a', actual.ORT01);
        system.assertEquals('a', actual.PSTLZ);
        system.assertEquals('a', actual.REGIO);
        system.assertEquals('a', actual.SORTL);
        system.assertEquals('a', actual.STRAS);
        system.assertEquals('a', actual.TELF1);
        system.assertEquals('a', actual.TELFX);
        system.assertEquals('a', actual.XCPDK);
        system.assertEquals('a', actual.ADRNR);
        system.assertEquals('a', actual.MCOD1);
        system.assertEquals('a', actual.MCOD2);
        system.assertEquals('a', actual.MCOD3);
        system.assertEquals('a', actual.ANRED);
        system.assertEquals('a', actual.AUFSD);
        system.assertEquals('a', actual.BAHNE);
        system.assertEquals('a', actual.BAHNS);
        system.assertEquals('a', actual.BBBNR);
        system.assertEquals('a', actual.BBSNR);
        system.assertEquals('a', actual.BEGRU);
        system.assertEquals('a', actual.BRSCH);
        system.assertEquals('a', actual.BUBKZ);
        system.assertEquals('a', actual.DATLT);
        system.assertEquals(Date.newInstance(2000,1,1), actual.ERDAT);
        system.assertEquals('a', actual.ERNAM);
        system.assertEquals('a', actual.EXABL);
        system.assertEquals('a', actual.FAKSD);
        //system.assertEquals('a', actual.FISKN);
        system.assertEquals('a', actual.KNAZK);
        system.assertEquals('a', actual.KNRZA);
        system.assertEquals('a', actual.KONZS);
        system.assertEquals('a', actual.KTOKD);
        system.assertEquals('a', actual.KUKLA);
        system.assertEquals('a', actual.LIFNR);
        system.assertEquals('a', actual.LIFSD);
        system.assertEquals('a', actual.LOCCO);
        system.assertEquals('a', actual.LOEVM);
        system.assertEquals('a', actual.NAME3);
        system.assertEquals('a', actual.NAME4);
        system.assertEquals('a', actual.NIELS);
        system.assertEquals('a', actual.ORT02);
        system.assertEquals('a', actual.PFACH);
        system.assertEquals('a', actual.PSTL2);
        system.assertEquals('a', actual.COUNC);
        system.assertEquals('a', actual.CITYC);
        system.assertEquals('a', actual.RPMKR);
        system.assertEquals('a', actual.SPERR);
        system.assertEquals('a', actual.SPRAS);
        system.assertEquals('a', actual.STCD1);
        system.assertEquals('a', actual.STCD2);
        system.assertEquals('a', actual.STKZA);
        system.assertEquals('a', actual.STKZU);
        system.assertEquals('a', actual.TELBX);
        system.assertEquals('a', actual.TELF2);
        system.assertEquals('a', actual.TELTX);
        system.assertEquals('a', actual.TELX1);
        system.assertEquals('a', actual.LZONE);
        system.assertEquals('a', actual.XZEMP);
        system.assertEquals('a', actual.VBUND);
        system.assertEquals('a', actual.STCEG);
        system.assertEquals('a', actual.DEAR1);
        system.assertEquals('a', actual.DEAR2);
        system.assertEquals('a', actual.DEAR3);
        system.assertEquals('a', actual.DEAR4);
        system.assertEquals('a', actual.DEAR5);
        system.assertEquals('a', actual.GFORM);
        system.assertEquals('a', actual.BRAN1);
        system.assertEquals('a', actual.BRAN2);
        system.assertEquals('a', actual.BRAN3);
        system.assertEquals('a', actual.BRAN4);
        system.assertEquals('a', actual.BRAN5);
        system.assertEquals('a', actual.EKONT);
        system.assertEquals(0, actual.UMSAT);
        system.assertEquals('a', actual.UMJAH);
        system.assertEquals('a', actual.UWAER);
        system.assertEquals('a', actual.JMZAH);
        system.assertEquals('a', actual.JMJAH);
        system.assertEquals('a', actual.KATR1);
        system.assertEquals('a', actual.KATR2);
        system.assertEquals('a', actual.KATR3);
        system.assertEquals('a', actual.KATR4);
        system.assertEquals('a', actual.KATR5);
        system.assertEquals('a', actual.KATR6);
        system.assertEquals('a', actual.KATR7);
        system.assertEquals('a', actual.KATR8);
        system.assertEquals('a', actual.KATR9);
        system.assertEquals('a', actual.KATR10);
        system.assertEquals('a', actual.STKZN);
        system.assertEquals(0, actual.UMSA1);
        system.assertEquals('a', actual.TXJCD);
        system.assertEquals('a', actual.PERIV);
        system.assertEquals('a', actual.ABRVW);
        system.assertEquals('a', actual.INSPBYDEBI);
        system.assertEquals('a', actual.INSPATDEBI);
        system.assertEquals('a', actual.KTOCD);
        system.assertEquals('a', actual.PFORT);
        system.assertEquals('a', actual.WERKS);
        system.assertEquals('a', actual.DTAMS);
        system.assertEquals('a', actual.DTAWS);
        system.assertEquals('a', actual.DUEFL);
        system.assertEquals('a', actual.HZUOR);
        system.assertEquals('a', actual.SPERZ);
        system.assertEquals('a', actual.ETIKG);
        system.assertEquals('a', actual.CIVVE);
        system.assertEquals('a', actual.MILVE);
        system.assertEquals('a', actual.KDKG1);
        system.assertEquals('a', actual.KDKG2);
        system.assertEquals('a', actual.KDKG3);
        system.assertEquals('a', actual.KDKG4);
        system.assertEquals('a', actual.KDKG5);
        system.assertEquals('a', actual.XKNZA);
        system.assertEquals('a', actual.FITYP);
        system.assertEquals('a', actual.STCDT);
        system.assertEquals('a', actual.STCD3);
        system.assertEquals('a', actual.STCD4);
        system.assertEquals('a', actual.STCD5);
        system.assertEquals('a', actual.XICMS);
        system.assertEquals('a', actual.XXIPI);
        system.assertEquals('a', actual.XSUBT);
        system.assertEquals('a', actual.CFOPC);
        system.assertEquals('a', actual.TXLW1);
        system.assertEquals('a', actual.TXLW2);
        system.assertEquals('a', actual.CCC01);
        system.assertEquals('a', actual.CCC02);
        system.assertEquals('a', actual.CCC03);
        system.assertEquals('a', actual.CCC04);
        system.assertEquals('a', actual.CASSD);
        system.assertEquals('a', actual.KNURL);
        system.assertEquals('a', actual.J_1KFREPRE);
        system.assertEquals('a', actual.J_1KFTBUS);
        system.assertEquals('a', actual.J_1KFTIND);
        system.assertEquals('a', actual.CONFS);
        system.assertEquals(Date.newInstance(2000,1,1), actual.UPDAT);
        system.assertEquals('a', actual.UPTIM);
        system.assertEquals('a', actual.NODEL);
        system.assertEquals('a', actual.DEAR6);
        system.assertEquals(0, actual.x_VSO_R_PALHGT);
        system.assertEquals('a', actual.x_VSO_R_PAL_UL);
        system.assertEquals('a', actual.x_VSO_R_PK_MAT);
        system.assertEquals('a', actual.x_VSO_R_MATPAL);
        system.assertEquals('a', actual.x_VSO_R_I_NO_LYR);
        system.assertEquals('a', actual.x_VSO_R_ONE_MAT);
        system.assertEquals('a', actual.x_VSO_R_ONE_SORT);
        system.assertEquals('a', actual.x_VSO_R_ULD_SIDE);
        system.assertEquals('a', actual.x_VSO_R_LOAD_PREF);
        system.assertEquals('a', actual.x_VSO_R_DPOINT);
        system.assertEquals('a', actual.ALC);
        system.assertEquals('a', actual.PMT_OFFICE);
        system.assertEquals('a', actual.PSOFG);
        system.assertEquals('a', actual.PSOIS);
        system.assertEquals('a', actual.PSON1);
        system.assertEquals('a', actual.PSON2);
        system.assertEquals('a', actual.PSON3);
        system.assertEquals('a', actual.PSOVN);
        system.assertEquals('a', actual.PSOTL);
        system.assertEquals('a', actual.PSOHS);
        system.assertEquals('a', actual.PSOST);
        system.assertEquals('a', actual.PSOO1);
        system.assertEquals('a', actual.PSOO2);
        system.assertEquals('a', actual.PSOO3);
        system.assertEquals('a', actual.PSOO4);
        system.assertEquals('a', actual.PSOO5);
        system.assertEquals('a', actual.ZZFLD000004);
        system.assertEquals('a', actual.ZZZNATURE);
        system.assertEquals('a', actual.ZZREGOFBUS);
        system.assertEquals('a', actual.ZZSALESFORCE_ID);
        system.assertEquals('a', actual.SFGUID);
        system.assertEquals('a', actual.ZZMASTERAGRE);
        system.assertEquals('a', actual.ZROLE);

        ZCSNCREATEUPDATE.I_KNA1 actual0 = new ZCSNCREATEUPDATE.I_KNA1();
    }
    @istest
    private static void TestI_KNVI() {
        ZCSNCREATEUPDATE.I_KNVI actual = new ZCSNCREATEUPDATE.I_KNVI('a','a','a','a','a','a');

        system.assertEquals('a', actual.MANDT);
        system.assertEquals('a', actual.KUNNR);
        system.assertEquals('a', actual.ALAND);
        system.assertEquals('a', actual.TATYP);
        system.assertEquals('a', actual.TAXKD);
        system.assertEquals('a', actual.KZ);

        ZCSNCREATEUPDATE.I_KNVI actual0 = new ZCSNCREATEUPDATE.I_KNVI();
    }
    @istest
    private static void TestI_KNVP() {
        ZCSNCREATEUPDATE.I_KNVP actual = new ZCSNCREATEUPDATE.I_KNVP('a','a','a','a','a','a','a','a','a','a','a','a','a','a');

        system.assertEquals('a', actual.MANDT);
        system.assertEquals('a', actual.KUNNR);
        system.assertEquals('a', actual.VKORG);
        system.assertEquals('a', actual.VTWEG);
        system.assertEquals('a', actual.SPART);
        system.assertEquals('a', actual.PARVW);
        system.assertEquals('a', actual.PARZA);
        system.assertEquals('a', actual.KUNN2);
        system.assertEquals('a', actual.LIFNR);
        system.assertEquals('a', actual.PERNR);
        system.assertEquals('a', actual.PARNR);
        system.assertEquals('a', actual.KNREF);
        system.assertEquals('a', actual.DEFPA);
        system.assertEquals('a', actual.KZ);

        ZCSNCREATEUPDATE.I_KNVP actual0 = new ZCSNCREATEUPDATE.I_KNVP();
    }
    @istest
    private static void TestI_KNVV() {
        ZCSNCREATEUPDATE.I_KNVV actual = new ZCSNCREATEUPDATE.I_KNVV('a','a','a','a','a','a',Date.newInstance(2000,1,1),'a','a','a','a','a','a','a','a','a','a','a','a','a','a',0,'a','a','a','a','a','a','a','a','a','a');

        actual.KVAKZ = 'a';
        actual.KVAWT = 0;
        actual.WAERS = 'a';
        actual.KLABC = 'a';
        actual.KTGRD = 'a';
        actual.ZTERM = 'a';
        actual.VWERK = 'a';
        actual.VKGRP = 'a';
        actual.VKBUR = 'a';
        actual.VSORT = 'a';
        actual.KVGR1 = 'a';
        actual.KVGR2 = 'a';
        actual.KVGR3 = 'a';
        actual.KVGR4 = 'a';
        actual.KVGR5 = 'a';
        actual.BOKRE = 'a';
        actual.BOIDT = Date.newInstance(2000,1,1);
        actual.KURST = 'a';
        actual.PRFRE = 'a';
        actual.PRAT1 = 'a';
        actual.PRAT2 = 'a';
        actual.PRAT3 = 'a';
        actual.PRAT4 = 'a';
        actual.PRAT5 = 'a';
        actual.PRAT6 = 'a';
        actual.PRAT7 = 'a';
        actual.PRAT8 = 'a';
        actual.PRAT9 = 'a';
        actual.PRATA = 'a';
        actual.KABSS = 'a';
        actual.KKBER = 'a';
        actual.CASSD = 'a';
        actual.RDOFF = 'a';
        actual.AGREL = 'a';
        actual.MEGRU = 'a';
        actual.UEBTO = 0;
        actual.UNTTO = 0;
        actual.UEBTK = 'a';
        actual.PVKSM = 'a';
        actual.PODKZ = 'a';
        actual.PODTG = 0;
        actual.BLIND = 'a';
        actual.CARRIER_NOTIF = 'a';
        actual.x_BEV1_EMLGPFAND = 'a';
        actual.x_BEV1_EMLGFORTS = 'a';
        actual.ZPRICING_DATE = Date.newInstance(2000,1,1);
        system.assertEquals('a', actual.MANDT);
        system.assertEquals('a', actual.KUNNR);
        system.assertEquals('a', actual.VKORG);
        system.assertEquals('a', actual.VTWEG);
        system.assertEquals('a', actual.SPART);
        system.assertEquals('a', actual.ERNAM);
        system.assertEquals(Date.newInstance(2000,1,1), actual.ERDAT);
        system.assertEquals('a', actual.BEGRU);
        system.assertEquals('a', actual.LOEVM);
        system.assertEquals('a', actual.VERSG);
        system.assertEquals('a', actual.AUFSD);
        system.assertEquals('a', actual.KALKS);
        system.assertEquals('a', actual.KDGRP);
        system.assertEquals('a', actual.BZIRK);
        system.assertEquals('a', actual.KONDA);
        system.assertEquals('a', actual.PLTYP);
        system.assertEquals('a', actual.AWAHR);
        system.assertEquals('a', actual.INCO1);
        system.assertEquals('a', actual.INCO2);
        system.assertEquals('a', actual.LIFSD);
        system.assertEquals('a', actual.AUTLF);
        system.assertEquals(0, actual.ANTLF);
        system.assertEquals('a', actual.KZTLF);
        system.assertEquals('a', actual.KZAZU);
        system.assertEquals('a', actual.CHSPL);
        system.assertEquals('a', actual.LPRIO);
        system.assertEquals('a', actual.EIKTO);
        system.assertEquals('a', actual.VSBED);
        system.assertEquals('a', actual.FAKSD);
        system.assertEquals('a', actual.MRNKZ);
        system.assertEquals('a', actual.PERFK);
        system.assertEquals('a', actual.PERRL);
        system.assertEquals('a', actual.KVAKZ);
        system.assertEquals(0, actual.KVAWT);
        system.assertEquals('a', actual.WAERS);
        system.assertEquals('a', actual.KLABC);
        system.assertEquals('a', actual.KTGRD);
        system.assertEquals('a', actual.ZTERM);
        system.assertEquals('a', actual.VWERK);
        system.assertEquals('a', actual.VKGRP);
        system.assertEquals('a', actual.VKBUR);
        system.assertEquals('a', actual.VSORT);
        system.assertEquals('a', actual.KVGR1);
        system.assertEquals('a', actual.KVGR2);
        system.assertEquals('a', actual.KVGR3);
        system.assertEquals('a', actual.KVGR4);
        system.assertEquals('a', actual.KVGR5);
        system.assertEquals('a', actual.BOKRE);
        system.assertEquals(Date.newInstance(2000,1,1), actual.BOIDT);
        system.assertEquals('a', actual.KURST);
        system.assertEquals('a', actual.PRFRE);
        system.assertEquals('a', actual.PRAT1);
        system.assertEquals('a', actual.PRAT2);
        system.assertEquals('a', actual.PRAT3);
        system.assertEquals('a', actual.PRAT4);
        system.assertEquals('a', actual.PRAT5);
        system.assertEquals('a', actual.PRAT6);
        system.assertEquals('a', actual.PRAT7);
        system.assertEquals('a', actual.PRAT8);
        system.assertEquals('a', actual.PRAT9);
        system.assertEquals('a', actual.PRATA);
        system.assertEquals('a', actual.KABSS);
        system.assertEquals('a', actual.KKBER);
        system.assertEquals('a', actual.CASSD);
        system.assertEquals('a', actual.RDOFF);
        system.assertEquals('a', actual.AGREL);
        system.assertEquals('a', actual.MEGRU);
        system.assertEquals(0, actual.UEBTO);
        system.assertEquals(0, actual.UNTTO);
        system.assertEquals('a', actual.UEBTK);
        system.assertEquals('a', actual.PVKSM);
        system.assertEquals('a', actual.PODKZ);
        system.assertEquals(0, actual.PODTG);
        system.assertEquals('a', actual.BLIND);
        system.assertEquals('a', actual.CARRIER_NOTIF);
        system.assertEquals('a', actual.x_BEV1_EMLGPFAND);
        system.assertEquals('a', actual.x_BEV1_EMLGFORTS);
        system.assertEquals(Date.newInstance(2000,1,1), actual.ZPRICING_DATE);

        ZCSNCREATEUPDATE.I_KNVV actual0 = new ZCSNCREATEUPDATE.I_KNVV();
    }
    @istest
    private static void TestRETURN_x() {
        ZCSNCREATEUPDATE.RETURN_x actual = new ZCSNCREATEUPDATE.RETURN_x('a','a','a','a','a','a','a','a','a');

        system.assertEquals('a', actual.TYPE_x);
        system.assertEquals('a', actual.CODE);
        system.assertEquals('a', actual.MESSAGE);
        system.assertEquals('a', actual.LOG_NO);
        system.assertEquals('a', actual.LOG_MSG_NO);
        system.assertEquals('a', actual.MESSAGE_V1);
        system.assertEquals('a', actual.MESSAGE_V2);
        system.assertEquals('a', actual.MESSAGE_V3);
        system.assertEquals('a', actual.MESSAGE_V4);

        ZCSNCREATEUPDATE.RETURN_x actual0 = new ZCSNCREATEUPDATE.RETURN_x();
    }

    @istest
    private static void testRun() {
        ZCSNCREATEUPDATE request = testSetup();
        /*ZCSNCREATEUPDATE response = request.run();
        system.assertEquals('a', response.ZCUSTOMER_CREATE_OVERCAST.E_KUNNR);
        string requestid = request.runAsync(null, null, new Continuation(10));*///Commented by Sourav for Overcast uninstall
    }

    private static ZCSNCREATEUPDATE testSetup() {
        //overcast.TestingUtilities.SetupTestEnvironment('ZCSNCREATEUPDATE');//Commented by Sourav for Overcast uninstall
        ZCSNCREATEUPDATE request = new ZCSNCREATEUPDATE();
        /*request.ZCUSTOMER_CREATE_OVERCAST.E_KUNNR = 'a';

        string s = request.serialize();
        request.testResponse = '{"output":' + s + '}';*///Commented by Sourav for Overcast uninstall
        return request;
    }


    @istest
    private static void TestSerialize() {
        ZCSNCREATEUPDATE input = new ZCSNCREATEUPDATE();
        /*input.ZCUSTOMER_CREATE_OVERCAST.E_KUNNR = 'a';
        ZCSNCREATEUPDATE actual = (ZCSNCREATEUPDATE)JSON.deserialize(input.serialize(), ZCSNCREATEUPDATE.class);
        system.assertEquals('a', actual.ZCUSTOMER_CREATE_OVERCAST.E_KUNNR);*///Commented by Sourav for Overcast uninstall
    }

    @istest
    private static void TestDeserialize() {
        ZCSNCREATEUPDATE output = new ZCSNCREATEUPDATE();
        //output.ZCUSTOMER_CREATE_OVERCAST.E_KUNNR = 'a';//Commented by Sourav for Overcast uninstall

        string s = output.serialize();
        ZCSNCREATEUPDATE actual = ZCSNCREATEUPDATE.deserialize('{"output":' + s + '}');
        //system.assertEquals('a', actual.ZCUSTOMER_CREATE_OVERCAST.E_KUNNR);//Commented by Sourav for Overcast uninstall
    }

    @istest
    private static void TestDeserializeError() {
        try {
            ZCSNCREATEUPDATE actual = ZCSNCREATEUPDATE.deserialize('{"error":["A test error"]}');
            system.assert(false, 'No exception thrown');
        }
        catch (ZCSNCREATEUPDATE.ZCSNCREATEUPDATEException e) {
            system.assertEquals('A test error', e.getMessage());
        }
    }

    @istest
    private static void TestGetterSetter() {
        ZCSNCREATEUPDATE output = new ZCSNCREATEUPDATE();
        output.set('SAMPLE1', new map<string, object>{
            'FIELD1' => 'VALUE1'
        });
        
        system.assertEquals(null, output.get('NOVAL'));
        
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));       
    }
    
    @istest
    private static void TestLoadAsyncResponse() {
        ZCSNCREATEUPDATE output = new ZCSNCREATEUPDATE();
        output.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        system.assertEquals(null, output.get('NOVAL'));
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));
    }

    @istest
    private static void TestGetMetadata() {
        ZCSNCREATEUPDATE output = new ZCSNCREATEUPDATE();
       /* map<string, overcast.TypeInfo> metadata = output.getMetadata();
        
        set<string> keys = metadata.keySet();
        system.assert(keys.contains('ZCUSTOMER_CREATE_OVERCAST'));
        system.assert(keys.contains('O_KNA1'));
        system.assert(keys.contains('I_BAPIADDR1'));
        system.assert(keys.contains('I_KNA1'));
        system.assert(keys.contains('I_KNVI'));
        system.assert(keys.contains('I_KNVP'));
        system.assert(keys.contains('I_KNVV'));
        system.assert(keys.contains('RETURN_x'));
        
        overcast.TypeInfo first = metadata.get(output.getTopTypeName());
        system.assertNotEquals(null, first);
        system.assertEquals('ZCUSTOMER_CREATE_OVERCAST', first.name);*///Commented by Sourav for Overcast uninstall
    }
}