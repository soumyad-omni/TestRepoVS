global class sapCreditDetail {//implements overcast.Realtime.Runnable {//Commented by Sourav for Overcast uninstall
/* 
 * Generated by Overcast UTC 2020-01-05 06:46:00Z.
 * Changes to this class may cause incorresapCreditDetailct behavior and will be lost if the scenario is re-activated.
 */
    public class sapCreditDetailException extends Exception {}
    
    global sapCreditDetail() {
        this.ISM_BAPI_CR_ACC_GETDETAIL = new sapCreditDetail.ISM_BAPI_CR_ACC_GETDETAIL();
        this.PS_CREDIT_ACCOUNT_DETAIL_ALL = new sapCreditDetail.PS_CREDIT_ACCOUNT_DETAIL_ALL();
        this.RETURN_x = new sapCreditDetail.RETURN_x();
    }

    public class ISM_BAPI_CR_ACC_GETDETAIL {
        @AuraEnabled public String PV_ALLOWED_AGING_IN_DAYS { get; set; }
        @AuraEnabled public String PV_ALLOWED_AGING_IN_HOURS { get; set; }
        @AuraEnabled public String PV_CREDIT_CONTROL_AREA { get; set; }
        @AuraEnabled public String PV_CUSTOMER { get; set; }

        public ISM_BAPI_CR_ACC_GETDETAIL() {}

        public ISM_BAPI_CR_ACC_GETDETAIL(String pPV_ALLOWED_AGING_IN_DAYS, String pPV_ALLOWED_AGING_IN_HOURS, String pPV_CREDIT_CONTROL_AREA, String pPV_CUSTOMER) {
            this.PV_ALLOWED_AGING_IN_DAYS = pPV_ALLOWED_AGING_IN_DAYS;
            this.PV_ALLOWED_AGING_IN_HOURS = pPV_ALLOWED_AGING_IN_HOURS;
            this.PV_CREDIT_CONTROL_AREA = pPV_CREDIT_CONTROL_AREA;
            this.PV_CUSTOMER = pPV_CUSTOMER;
        }
    }

    public class PS_CREDIT_ACCOUNT_DETAIL_ALL {
        @AuraEnabled public Decimal CRED_LIMIT { get; set; }
        @AuraEnabled public String CRED_ACCNT { get; set; }
        @AuraEnabled public Decimal RCVBL_VALS { get; set; }
        @AuraEnabled public Decimal CRED_LIAB { get; set; }
        @AuraEnabled public String CURRENCY_x { get; set; }
        @AuraEnabled public String RISK_CATEG { get; set; }
        @AuraEnabled public String BLOCKED { get; set; }
        @AuraEnabled public Date NXT_REVIEW { get; set; }
        @AuraEnabled public Decimal SECURED_ITEMS { get; set; }
        @AuraEnabled public String DATA_TOO_OLD { get; set; }
        @AuraEnabled public String DATA_NOT_FOUND { get; set; }
        @AuraEnabled public String AGING_IN_DAYS { get; set; }
        @AuraEnabled public String AGING_IN_HOURS { get; set; }
        @AuraEnabled public Decimal ORDER_VALS { get; set; }
        @AuraEnabled public Decimal TOTAL_LIABILITIES { get; set; }

        public PS_CREDIT_ACCOUNT_DETAIL_ALL() {}

        public PS_CREDIT_ACCOUNT_DETAIL_ALL(Decimal pCRED_LIMIT, String pCRED_ACCNT, Decimal pRCVBL_VALS, Decimal pCRED_LIAB, String pCURRENCY_x, String pRISK_CATEG, String pBLOCKED, Date pNXT_REVIEW, Decimal pSECURED_ITEMS, String pDATA_TOO_OLD, String pDATA_NOT_FOUND, String pAGING_IN_DAYS, String pAGING_IN_HOURS, Decimal pORDER_VALS, Decimal pTOTAL_LIABILITIES) {
            this.CRED_LIMIT = pCRED_LIMIT;
            this.CRED_ACCNT = pCRED_ACCNT;
            this.RCVBL_VALS = pRCVBL_VALS;
            this.CRED_LIAB = pCRED_LIAB;
            this.CURRENCY_x = pCURRENCY_x;
            this.RISK_CATEG = pRISK_CATEG;
            this.BLOCKED = pBLOCKED;
            this.NXT_REVIEW = pNXT_REVIEW;
            this.SECURED_ITEMS = pSECURED_ITEMS;
            this.DATA_TOO_OLD = pDATA_TOO_OLD;
            this.DATA_NOT_FOUND = pDATA_NOT_FOUND;
            this.AGING_IN_DAYS = pAGING_IN_DAYS;
            this.AGING_IN_HOURS = pAGING_IN_HOURS;
            this.ORDER_VALS = pORDER_VALS;
            this.TOTAL_LIABILITIES = pTOTAL_LIABILITIES;
        }
    }

    public class RETURN_x {
        @AuraEnabled public String TYPE_x { get; set; }
        @AuraEnabled public String ID { get; set; }
        @AuraEnabled public String NUMBER_x { get; set; }
        @AuraEnabled public String MESSAGE { get; set; }
        @AuraEnabled public String LOG_NO { get; set; }
        @AuraEnabled public String LOG_MSG_NO { get; set; }
        @AuraEnabled public String MESSAGE_V1 { get; set; }
        @AuraEnabled public String MESSAGE_V2 { get; set; }
        @AuraEnabled public String MESSAGE_V3 { get; set; }
        @AuraEnabled public String MESSAGE_V4 { get; set; }

        public RETURN_x() {}

        public RETURN_x(String pTYPE_x, String pID, String pNUMBER_x, String pMESSAGE, String pLOG_NO, String pLOG_MSG_NO, String pMESSAGE_V1, String pMESSAGE_V2, String pMESSAGE_V3, String pMESSAGE_V4) {
            this.TYPE_x = pTYPE_x;
            this.ID = pID;
            this.NUMBER_x = pNUMBER_x;
            this.MESSAGE = pMESSAGE;
            this.LOG_NO = pLOG_NO;
            this.LOG_MSG_NO = pLOG_MSG_NO;
            this.MESSAGE_V1 = pMESSAGE_V1;
            this.MESSAGE_V2 = pMESSAGE_V2;
            this.MESSAGE_V3 = pMESSAGE_V3;
            this.MESSAGE_V4 = pMESSAGE_V4;
        }
    }

    @AuraEnabled public sapCreditDetail.ISM_BAPI_CR_ACC_GETDETAIL ISM_BAPI_CR_ACC_GETDETAIL { get; set; }
    @AuraEnabled public sapCreditDetail.PS_CREDIT_ACCOUNT_DETAIL_ALL PS_CREDIT_ACCOUNT_DETAIL_ALL { get; set; }
    @AuraEnabled public sapCreditDetail.RETURN_x RETURN_x { get; set; }

    public string inputSetName { get; set; }
/*
    public sapCreditDetail run() {
        overcast.Logger logger1 = new overcast.Logger('sapCreditDetail');
        try {
            sapCreditDetail response = this.run(logger1, null);
            logger1.commitToDatabase();
            return response;
        }
        catch (Exception e) {
            logger1.addLog('ERROR', e.getTypeName() + ': ' + e.getMessage());
            logger1.setStatusCode(300);
            logger1.commitToDatabase();
            throw e;
        }
    }
    
    public sapCreditDetail run(overcast.Logger logger, string namedCredential) {
        overcast.SynchronousHandler sh = setup(logger, namedCredential);

        if (Test.isRunningTest()) {
            if (this.dynamicBody != null) {
                return this;
            }
            return sapCreditDetail.deserialize(this.testResponse);
        }
        overcast.EpgwController.ExecuteScenarioSynchronously(sh, logger);
        
        return sapCreditDetail.deserialize(sh.Response);
    }

    public string runAsync(overcast.Logger logger, string namedCredential, Continuation con) {
        overcast.SynchronousHandler sh = setup(logger, namedCredential);

        sh.ContinuationWebRequest = new HttpRequest();
        overcast.EpgwController.ExecuteScenarioSynchronously(sh, logger);

        return con.addHttpRequest(sh.ContinuationWebRequest);
    }*///Commented by Sourav for Overcast uninstall

    public static sapCreditDetail handleAsyncResponse(HttpResponse resp) {
        return sapCreditDetail.deserialize(resp.getBody());
    }

    public static sapCreditDetail getAsyncResponse(String requestLabel) {
        HttpResponse response = Continuation.getResponse(requestLabel);
        return handleAsyncResponse(response);
    }
/*
    private overcast.SynchronousHandler setup(overcast.Logger logger, string namedCredential) {
        overcast.SynchronousHandler sh = overcast.SynchronousHandler.CreateFromName('sapCreditDetail');
        if (!String.isBlank(this.inputSetName)) {
            sh.CorrelationId = this.inputSetName;
        }
        sh.InputJson = this.serialize();
        sh.NamedCredential = namedCredential;
        if (logger != null) {
            logger.setInputSetName(sh.CorrelationId);
        }

        return sh;
    }*///Commented by Sourav for Overcast uninstall

    public string getBackendMessage() {
        return this.backendMessage;
    }

    global string serialize() {
        if (dynamicBody != null) {
            return JSON.serialize(dynamicBody, true);
        }
        return JSON.serialize(this, true);
    }
    
    public static sapCreditDetail deserialize(string responsedata) {
        map<string, string> m = getOutputData(responsedata);
        string outputData = m.get('output');
        string backendMessage = m.get('backendMessage');
        if (outputData == null) {
            return new sapCreditDetail();
        }
        sapCreditDetail obj = (sapCreditDetail)JSON.deserialize(outputData, sapCreditDetail.class);
        obj.outputData = outputData;
        obj.backendMessage = backendMessage;

        return obj;
    }

    private static map<string, string> getOutputData(string responseData) {
        if (string.isblank(responsedata)) {
            throw new sapCreditDetailException('Response null for sapCreditDetail request.');
        }

        map<string, string> m = new map<string, string>();

        JSONParser jresponse = JSON.createParser(responsedata);
        jresponse.nextValue();

        boolean hasOutput = false;
        while (jresponse.nextValue() != JSONToken.END_OBJECT && jresponse.getCurrentToken() != null) {
            if (jresponse.getCurrentName() == 'output') {
                jresponse.skipChildren();
                hasOutput = true;
                continue;
            }
            if (jresponse.getCurrentName() == 'backendMessage') {
                m.put('backendMessage', (string)jresponse.readValueAs(string.class));
                continue;
            }
            if (jresponse.getCurrentName() == 'error') {
                string[] errors = (string[])jresponse.readValueAs(list<string>.class);
                throw new sapCreditDetailException(string.join(errors, ';'));
            }
        }
        if (!hasOutput) {
            throw new sapCreditDetailException('Malformed response for sapCreditDetail request.');
        }
        integer start = responsedata.indexOf(':') + 1;
        integer lastIndex = m.get('backendMessage') == null
            ? responsedata.length() - 2
            : responsedata.lastIndexOf('backendMessage');
        integer finish = responsedata.lastIndexOf('}', lastIndex) + 1;
        m.put('output', responseData.substring(start, finish));
        return m;
    }


    public transient string testResponse;
    private transient string outputData;
    private transient string backendMessage;

    //private transient map<string, overcast.TypeInfo> metadata;//Commented by Sourav for Overcast uninstall
    private transient map<string, object> dynamicBody;

    global void loadAsyncResponse(string responseBody) {
        map<string, string> m = getOutputData(responseBody);
        outputData = m.get('output');
        backendMessage = m.get('backendMessage');
        
        if (outputData != null) {
            dynamicBody = (map<string, object>)JSON.deserializeUntyped(outputData);
        }
    }

    global string getTopTypeName() {
        return 'ISM_BAPI_CR_ACC_GETDETAIL';
    }

    global void set(string typeName, object records) {
        if (typeName == '@testResponse') {
            dynamicBody = (map<string, object>)records;
            return;
        }
        if (dynamicBody == null) {
            dynamicBody = new map<string, object>();
        }
        
        dynamicBody.put(typeName, records);
    }
    
    global object get(string typeName) {
        if (dynamicBody == null && outputData != null) {
            dynamicBody = (map<string, object>)JSON.deserializeUntyped(outputData);
        }
        if (dynamicBody == null) { 
            return null;
        }
        return dynamicBody.get(typeName);
    }

    /*global map<string, overcast.TypeInfo> getMetadata() {
        if (metadata == null) {
            metadata = new Map<String, overcast.TypeInfo>();
            metadata.putAll(sapCreditDetailMeta0.metadata);
        }
        return metadata;
    }*///Commented by Sourav for Overcast uninstall

}