/* 
 * Generated by Overcast UTC 2019-03-02 20:21:09Z.
 * Changes to this class may cause incorrect behavior and will be lost if the scenario is re-activated.
 */
@istest
private class ZMARGINGSADISCTest {
    @istest
    private static void testZMARGINGSADISC() {
        ZMARGINGSADISC actual = new ZMARGINGSADISC();
        system.assertNotEquals(null, actual.ZCRMFM_MARGIN_OVERCAST);
        system.assertNotEquals(null, actual.ES_GSA_CALC);
        system.assertNotEquals(null, actual.ES_MARGIN_HDR);
        system.assertNotEquals(null, actual.ET_MARGIN_DETAILS);
        system.assertNotEquals(null, actual.IS_MARGIN_GSA);
    }

    @istest
    private static void TestZCRMFM_MARGIN_OVERCAST() {
        ZMARGINGSADISC.ZCRMFM_MARGIN_OVERCAST actual = new ZMARGINGSADISC.ZCRMFM_MARGIN_OVERCAST(0,0,0,0,0,0,0,0);

        system.assertEquals(0, actual.DISCOUNTABLE_ONLY);
        system.assertEquals(0, actual.DISC_ON_DISC_ONLY);
        system.assertEquals(0, actual.DISC_ON_NON_DISC);
        system.assertEquals(0, actual.DISC_VAL_TO_CUST);
        system.assertEquals(0, actual.NON_DISCOUNTABLE);
        system.assertEquals(0, actual.NON_DISC_VAL_TO_CUST);
        system.assertEquals(0, actual.REBATE);
        system.assertEquals(0, actual.SERV_DISC);

        ZMARGINGSADISC.ZCRMFM_MARGIN_OVERCAST actual0 = new ZMARGINGSADISC.ZCRMFM_MARGIN_OVERCAST();
    }
    @istest
    private static void TestES_GSA_CALC() {
        ZMARGINGSADISC.ES_GSA_CALC actual = new ZMARGINGSADISC.ES_GSA_CALC(0,0,0,'a');

        system.assertEquals(0, actual.ORDER_PRICE);
        system.assertEquals(0, actual.GSA_PRICE);
        system.assertEquals(0, actual.DIFF_PRICE);
        system.assertEquals('a', actual.RESULT);

        ZMARGINGSADISC.ES_GSA_CALC actual0 = new ZMARGINGSADISC.ES_GSA_CALC();
    }
    @istest
    private static void TestES_MARGIN_HDR() {
        ZMARGINGSADISC.ES_MARGIN_HDR actual = new ZMARGINGSADISC.ES_MARGIN_HDR('a','a','a','a','a','a','a','a','a','a',Date.newInstance(2000,1,1),0,0,0,Date.newInstance(2000,1,1),'a','a','a',0,0,0,0,0,0,0,0,0,0,0,0,0,0);

        actual.SERVICE_BOOKING = 0;
        actual.ORDER_TYPE_DESC = 'a';
        actual.IDN_PRICE_DESC = 'a';
        actual.GPO_PRICE_DESC = 'a';
        actual.IDN_PRICE_LIST = 'a';
        actual.SERVICE_PRICE_DESC = 'a';
        system.assertEquals('a', actual.ORDER_NUM);
        system.assertEquals('a', actual.ORDER_TYPE);
        system.assertEquals('a', actual.DESCRIPTION);
        system.assertEquals('a', actual.SOLD_TO_PARTY);
        system.assertEquals('a', actual.EMP_RESP);
        system.assertEquals('a', actual.LEASE_TERM);
        system.assertEquals('a', actual.FREE_LEASE);
        system.assertEquals('a', actual.SERVICE_TERM);
        system.assertEquals('a', actual.FREE_SERVICE);
        system.assertEquals('a', actual.STATUS);
        system.assertEquals(Date.newInstance(2000,1,1), actual.BOOKING_DATE);
        system.assertEquals(0, actual.NET_VALUE);
        system.assertEquals(0, actual.TAX_AMOUNT);
        system.assertEquals(0, actual.GROSS_AMOUNT);
        system.assertEquals(Date.newInstance(2000,1,1), actual.PRICING_DATE);
        system.assertEquals('a', actual.PRICE_LIST);
        system.assertEquals('a', actual.SERVICE_LEVEL);
        system.assertEquals('a', actual.CURRENCY_x);
        system.assertEquals(0, actual.MARGIN_PRODUCT);
        system.assertEquals(0, actual.MARGIN_SERVICE);
        system.assertEquals(0, actual.CONT_LPRICE_EXT);
        system.assertEquals(0, actual.DISCOUNT_EXT);
        system.assertEquals(0, actual.MARGIN_EXT);
        system.assertEquals(0, actual.VAL_CUST_EXT);
        system.assertEquals(0, actual.COST_EXT);
        system.assertEquals(0, actual.USA_LPRICE_EXT);
        system.assertEquals(0, actual.LABOR_EXT);
        system.assertEquals(0, actual.BILLING_EXT);
        system.assertEquals(0, actual.BOOKING_EXT);
        system.assertEquals(0, actual.COMMISSION_EXT);
        system.assertEquals(0, actual.OVERHEAD_EXT);
        system.assertEquals(0, actual.SERVICE_COST);
        system.assertEquals(0, actual.SERVICE_BOOKING);
        system.assertEquals('a', actual.ORDER_TYPE_DESC);
        system.assertEquals('a', actual.IDN_PRICE_DESC);
        system.assertEquals('a', actual.GPO_PRICE_DESC);
        system.assertEquals('a', actual.IDN_PRICE_LIST);
        system.assertEquals('a', actual.SERVICE_PRICE_DESC);

        ZMARGINGSADISC.ES_MARGIN_HDR actual0 = new ZMARGINGSADISC.ES_MARGIN_HDR();
    }
    @istest
    private static void TestET_MARGIN_DETAILS() {
        ZMARGINGSADISC.ET_MARGIN_DETAILS actual = new ZMARGINGSADISC.ET_MARGIN_DETAILS('a','a','a','a','a','a','a','a','a',Date.newInstance(2000,1,1),Date.newInstance(2000,1,1),'a','a','a','a','a','a','a','a',Date.newInstance(2000,1,1),'a','a','a','a','a','a','a','a','a','a','a','a');

        actual.PROD_CLASS_DESC = 'a';
        actual.PROD_TYPE_DESC = 'a';
        actual.QUANTITY = 0;
        actual.ITEM_CATEGORY = 'a';
        actual.ITEM_CATEGORY_DESC = 'a';
        actual.BOOKING_DATE = Date.newInstance(2000,1,1);
        actual.VALUE_TO_CUSTOMER = 0;
        actual.VALUE_TO_CUSTOMER_EXT = 0;
        actual.VALUE_CURRENCY = 'a';
        actual.REBATE_COMPETITOR_BUYOUT = 0;
        actual.PARTY_INT_RATE_3RD = 0;
        actual.PARTY_DEAL_SPREAD_3RD = 0;
        actual.NETVALUE = 0;
        actual.NETVALUE_EXT = 0;
        actual.NETVALUE_CURRENCY = 'a';
        actual.DISCOUNT = 0;
        actual.DISCOUNT_EXT = 0;
        actual.BILL_VAL_CUST = 0;
        actual.BILL_VAL_CUST_EXT = 0;
        actual.BILLING_URRENCY = 'a';
        actual.BOOK_VAL_OMNICELL = 0;
        actual.BOOK_VAL_OMNICELL_EXT = 0;
        actual.BOOKING_CURRENCY = 'a';
        actual.COMM_VAL_OMNICELL = 0;
        actual.COMM_VAL_OMNICELL_EXT = 0;
        actual.COMM_CURRENCY = 'a';
        actual.COST_TO_OMNICELL = 0;
        actual.COST_TO_OMNICELL_EXT = 0;
        actual.COST_CURRENCY = 'a';
        actual.LABOR_OMNICELL = 0;
        actual.LABOR_OMNICELL_EXT = 0;
        actual.USA_LIST_PRICE = 0;
        actual.USA_LIST_CURRENCY = 'a';
        actual.CONTRACT_LIST_PRICE = 0;
        actual.CONTRACT_LPRICE_EXT = 0;
        actual.CONTRACT_LIST_CURRENCY = 'a';
        actual.MARGIN = 0;
        actual.MARGIN_PERC = 'a';
        actual.SERVICE_COST = 0;
        actual.KPI_01_AMT = 0;
        actual.KPI_01_CURR = 'a';
        actual.KPI_02_AMT = 0;
        actual.KPI_02_CURR = 'a';
        actual.KPI_03_AMT = 0;
        actual.KPI_03_CURR = 'a';
        actual.KPI_04_AMT = 0;
        actual.KPI_04_CURR = 'a';
        actual.KPI_05_AMT = 0;
        actual.KPI_05_CURR = 'a';
        actual.KPI_06_AMT = 0;
        actual.KPI_06_CURR = 'a';
        actual.KPI_07_AMT = 0;
        actual.KPI_07_CURR = 'a';
        actual.KPI_08_AMT = 0;
        actual.KPI_08_CURR = 'a';
        actual.KPI_09_AMT = 0;
        actual.KPI_09_CURR = 'a';
        actual.KPI_10_AMT = 0;
        actual.KPI_10_CURR = 'a';
        actual.LINKED_OPP_ID = 'a';
        actual.LINKED_ORDER_ID = 'a';
        actual.OVERHEAD = 0;
        actual.PO_NUMBER_SHIP = 'a';
        actual.NON_DISCOUNTABLE = 'a';
        system.assertEquals('a', actual.QUOTE_ID);
        system.assertEquals('a', actual.QUOTE_TYPE);
        system.assertEquals('a', actual.QUOTE_TYPE_DESC);
        system.assertEquals('a', actual.QUOTE_DESC);
        system.assertEquals('a', actual.SOLD_TO_ID);
        system.assertEquals('a', actual.SOLD_TO_NAME);
        system.assertEquals('a', actual.EMP_RESP_NAME);
        system.assertEquals('a', actual.QUOTE_STATUS);
        system.assertEquals('a', actual.PO_NUMBER);
        system.assertEquals(Date.newInstance(2000,1,1), actual.VALID_FROM);
        system.assertEquals(Date.newInstance(2000,1,1), actual.VALID_TO);
        system.assertEquals('a', actual.CONTACT_NAME);
        system.assertEquals('a', actual.PAYER_ID);
        system.assertEquals('a', actual.PAYER_NAME);
        system.assertEquals('a', actual.CREATED_BY);
        system.assertEquals('a', actual.SHIP_TO_ID);
        system.assertEquals('a', actual.SHIP_TO_NAME);
        system.assertEquals('a', actual.BILL_TO_ID);
        system.assertEquals('a', actual.BILL_TO_NAME);
        system.assertEquals(Date.newInstance(2000,1,1), actual.REQ_DEL_DATE);
        system.assertEquals('a', actual.SALES_OFFICE);
        system.assertEquals('a', actual.DIST_CHANNEL);
        system.assertEquals('a', actual.TERRITORY_ID);
        system.assertEquals('a', actual.ITEM_NO);
        system.assertEquals('a', actual.HIGHER_ITEM_NO);
        system.assertEquals('a', actual.PRODUCT_CATEGORY);
        system.assertEquals('a', actual.PRODUCT_ID);
        system.assertEquals('a', actual.PRODUCT_NAME);
        system.assertEquals('a', actual.PROD_FAMILY);
        system.assertEquals('a', actual.PROD_LINE);
        system.assertEquals('a', actual.PROD_CLASS);
        system.assertEquals('a', actual.PROD_TYPE);
        system.assertEquals('a', actual.PROD_CLASS_DESC);
        system.assertEquals('a', actual.PROD_TYPE_DESC);
        system.assertEquals(0, actual.QUANTITY);
        system.assertEquals('a', actual.ITEM_CATEGORY);
        system.assertEquals('a', actual.ITEM_CATEGORY_DESC);
        system.assertEquals(Date.newInstance(2000,1,1), actual.BOOKING_DATE);
        system.assertEquals(0, actual.VALUE_TO_CUSTOMER);
        system.assertEquals(0, actual.VALUE_TO_CUSTOMER_EXT);
        system.assertEquals('a', actual.VALUE_CURRENCY);
        system.assertEquals(0, actual.REBATE_COMPETITOR_BUYOUT);
        system.assertEquals(0, actual.PARTY_INT_RATE_3RD);
        system.assertEquals(0, actual.PARTY_DEAL_SPREAD_3RD);
        system.assertEquals(0, actual.NETVALUE);
        system.assertEquals(0, actual.NETVALUE_EXT);
        system.assertEquals('a', actual.NETVALUE_CURRENCY);
        system.assertEquals(0, actual.DISCOUNT);
        system.assertEquals(0, actual.DISCOUNT_EXT);
        system.assertEquals(0, actual.BILL_VAL_CUST);
        system.assertEquals(0, actual.BILL_VAL_CUST_EXT);
        system.assertEquals('a', actual.BILLING_URRENCY);
        system.assertEquals(0, actual.BOOK_VAL_OMNICELL);
        system.assertEquals(0, actual.BOOK_VAL_OMNICELL_EXT);
        system.assertEquals('a', actual.BOOKING_CURRENCY);
        system.assertEquals(0, actual.COMM_VAL_OMNICELL);
        system.assertEquals(0, actual.COMM_VAL_OMNICELL_EXT);
        system.assertEquals('a', actual.COMM_CURRENCY);
        system.assertEquals(0, actual.COST_TO_OMNICELL);
        system.assertEquals(0, actual.COST_TO_OMNICELL_EXT);
        system.assertEquals('a', actual.COST_CURRENCY);
        system.assertEquals(0, actual.LABOR_OMNICELL);
        system.assertEquals(0, actual.LABOR_OMNICELL_EXT);
        system.assertEquals(0, actual.USA_LIST_PRICE);
        system.assertEquals('a', actual.USA_LIST_CURRENCY);
        system.assertEquals(0, actual.CONTRACT_LIST_PRICE);
        system.assertEquals(0, actual.CONTRACT_LPRICE_EXT);
        system.assertEquals('a', actual.CONTRACT_LIST_CURRENCY);
        system.assertEquals(0, actual.MARGIN);
        system.assertEquals('a', actual.MARGIN_PERC);
        system.assertEquals(0, actual.SERVICE_COST);
        system.assertEquals(0, actual.KPI_01_AMT);
        system.assertEquals('a', actual.KPI_01_CURR);
        system.assertEquals(0, actual.KPI_02_AMT);
        system.assertEquals('a', actual.KPI_02_CURR);
        system.assertEquals(0, actual.KPI_03_AMT);
        system.assertEquals('a', actual.KPI_03_CURR);
        system.assertEquals(0, actual.KPI_04_AMT);
        system.assertEquals('a', actual.KPI_04_CURR);
        system.assertEquals(0, actual.KPI_05_AMT);
        system.assertEquals('a', actual.KPI_05_CURR);
        system.assertEquals(0, actual.KPI_06_AMT);
        system.assertEquals('a', actual.KPI_06_CURR);
        system.assertEquals(0, actual.KPI_07_AMT);
        system.assertEquals('a', actual.KPI_07_CURR);
        system.assertEquals(0, actual.KPI_08_AMT);
        system.assertEquals('a', actual.KPI_08_CURR);
        system.assertEquals(0, actual.KPI_09_AMT);
        system.assertEquals('a', actual.KPI_09_CURR);
        system.assertEquals(0, actual.KPI_10_AMT);
        system.assertEquals('a', actual.KPI_10_CURR);
        system.assertEquals('a', actual.LINKED_OPP_ID);
        system.assertEquals('a', actual.LINKED_ORDER_ID);
        system.assertEquals(0, actual.OVERHEAD);
        system.assertEquals('a', actual.PO_NUMBER_SHIP);
        system.assertEquals('a', actual.NON_DISCOUNTABLE);

        ZMARGINGSADISC.ET_MARGIN_DETAILS actual0 = new ZMARGINGSADISC.ET_MARGIN_DETAILS();
    }
    @istest
    private static void TestIS_MARGIN_GSA() {
        ZMARGINGSADISC.IS_MARGIN_GSA actual = new ZMARGINGSADISC.IS_MARGIN_GSA('a','a','a','a','a');

        system.assertEquals('a', actual.QUOTE_ID);
        system.assertEquals('a', actual.PROCESS_TYPE);
        system.assertEquals('a', actual.CALC_GSA);
        system.assertEquals('a', actual.CALC_MARGIN);
        system.assertEquals('a', actual.CALC_DISC);

        ZMARGINGSADISC.IS_MARGIN_GSA actual0 = new ZMARGINGSADISC.IS_MARGIN_GSA();
    }

    @istest
    private static void testRun() {
        ZMARGINGSADISC request = testSetup();
        /*ZMARGINGSADISC response = request.run();
        system.assertEquals(0, response.ZCRMFM_MARGIN_OVERCAST.DISCOUNTABLE_ONLY);
        string requestid = request.runAsync(null, null, new Continuation(10));*///Commented by Sourav for Overcast uninstall
    }

    private static ZMARGINGSADISC testSetup() {
        //overcast.TestingUtilities.SetupTestEnvironment('ZMARGINGSADISC');//Commented by Sourav for Overcast uninstall
        ZMARGINGSADISC request = new ZMARGINGSADISC();
        request.ZCRMFM_MARGIN_OVERCAST.DISCOUNTABLE_ONLY = 0;

        string s = request.serialize();
        request.testResponse = '{"output":' + s + '}';
        return request;
    }

    @istest
    private static void TestSerialize() {
        ZMARGINGSADISC input = new ZMARGINGSADISC();
        input.ZCRMFM_MARGIN_OVERCAST.DISCOUNTABLE_ONLY = 0;
        ZMARGINGSADISC actual = (ZMARGINGSADISC)JSON.deserialize(input.serialize(), ZMARGINGSADISC.class);
        system.assertEquals(0, actual.ZCRMFM_MARGIN_OVERCAST.DISCOUNTABLE_ONLY);
    }

    @istest
    private static void TestDeserialize() {
        ZMARGINGSADISC output = new ZMARGINGSADISC();
        output.ZCRMFM_MARGIN_OVERCAST.DISCOUNTABLE_ONLY = 0;

        string s = output.serialize();
        ZMARGINGSADISC actual = ZMARGINGSADISC.deserialize('{"output":' + s + '}');
        system.assertEquals(0, actual.ZCRMFM_MARGIN_OVERCAST.DISCOUNTABLE_ONLY);
    }

    @istest
    private static void TestDeserializeError() {
        try {
            ZMARGINGSADISC actual = ZMARGINGSADISC.deserialize('{"error":["A test error"]}');
            system.assert(false, 'No exception thrown');
        }
        catch (ZMARGINGSADISC.ZMARGINGSADISCException e) {
            system.assertEquals('A test error', e.getMessage());
        }
    }

    @istest
    private static void TestGetterSetter() {
        ZMARGINGSADISC output = new ZMARGINGSADISC();
        output.set('SAMPLE1', new map<string, object>{
            'FIELD1' => 'VALUE1'
        });
        
        system.assertEquals(null, output.get('NOVAL'));
        
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));    
    }
    
    @istest
    private static void TestLoadAsyncResponse() {
        ZMARGINGSADISC output = new ZMARGINGSADISC();
        output.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        
        system.assertEquals(null, output.get('NOVAL'));
        
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));    
    }
    
    @istest
    private static void TestGetMetadata() {
        ZMARGINGSADISC output = new ZMARGINGSADISC();
        /*map<string, overcast.TypeInfo> metadata = output.getMetadata();
        
        set<string> keys = metadata.keySet();
        system.assert(keys.contains('ZCRMFM_MARGIN_OVERCAST'));
        system.assert(keys.contains('ES_GSA_CALC'));
        system.assert(keys.contains('ES_MARGIN_HDR'));
        system.assert(keys.contains('ET_MARGIN_DETAILS'));
        system.assert(keys.contains('IS_MARGIN_GSA'));
        
        overcast.TypeInfo first = metadata.get(output.getTopTypeName());
        system.assertNotEquals(null, first);
        system.assertEquals('ZCRMFM_MARGIN_OVERCAST', first.name);*///Commented by Sourav for Overcast uninstall
    }
}