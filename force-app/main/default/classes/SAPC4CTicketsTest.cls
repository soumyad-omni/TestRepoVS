/* 
 * Generated by Overcast UTC 2019-03-02 18:53:02Z.
 * Changes to this class may cause incorrect behavior and will be lost if the scenario is re-activated.
 */
@istest
private class SAPC4CTicketsTest {
    @istest
    private static void testSAPC4CTickets() {
        SAPC4CTickets actual = new SAPC4CTickets();
        system.assertNotEquals(null, actual.ServiceRequestCollection);
        system.assertNotEquals(null, actual.SRActivityReferenceCollection);
        system.assertNotEquals(null, actual.SRBTDocRefCollection);
        system.assertNotEquals(null, actual.ServiceRequestItemCollection);
        system.assertNotEquals(null, actual.ServiceRequestItemFulfilledCollection);
        system.assertNotEquals(null, actual.ServiceRequestItemRequestedCollection);
        system.assertNotEquals(null, actual.ServiceRequestItemTextCollection);
        system.assertNotEquals(null, actual.ServiceRequestServiceReferenceObjectCollection);
        system.assertNotEquals(null, actual.ServiceRequestTextCollection);
    }

    @istest
    private static void TestServiceRequestCollection() {
        SAPC4CTickets.ServiceRequestCollection actual = new SAPC4CTickets.ServiceRequestCollection('a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a',Datetime.newInstance(2000,1,1),'a','a','a','a','a',true,'a','a',Datetime.newInstance(2000,1,1),'a','a');

        actual.Fax = 'a';
        actual.HouseID = 'a';
        actual.ID = 'a';
        actual.InitalReviewDateCompleted = 'a';
        actual.InitialReviewDate = 'a';
        actual.InstallationPointID = 'a';
        actual.InstallationPointUUID = 'a';
        actual.LastAgentInteraction = 'a';
        actual.LastCustomerInteractionDate = 'a';
        actual.Mobile = 'a';
        actual.ObjectID = 'a';
        actual.Phone = 'a';
        actual.ProcessingTypeCode = 'a';
        actual.ProcessingTypeCodeText = 'a';
        actual.ProductCategoryDescription = 'a';
        actual.ProductDescription = 'a';
        actual.ProductID = 'a';
        actual.RegionCode = 'a';
        actual.RegionCodeText = 'a';
        actual.ReportedOnDate = 'a';
        actual.ReporterEmail = 'a';
        actual.RequestFinishedAtDateTime = 'a';
        actual.RequestFullfilmentEndDateTime = 'a';
        actual.RequestFullfilmentStartDateTime = 'a';
        actual.RequestTotalProcessingDuration = 'a';
        actual.ResolutionCodeID = 'a';
        actual.ResolutionCodeName = 'a';
        actual.ResolvedOnDateTime = 'a';
        actual.ResponseByProcessorDueDateTime = 'a';
        actual.ResponseByProcessorReferenceDateTime = 'a';
        actual.SerialID = 'a';
        actual.ServiceCodeID = 'a';
        actual.ServiceCodeName = 'a';
        actual.ServicePriorityCode = 'a';
        actual.ServicePriorityCodeText = 'a';
        actual.ServiceRequestLifeCycleStatusCode = 'a';
        actual.ServiceRequestLifeCycleStatusCodeText = 'a';
        actual.ServiceRequestUserLifeCycleStatusCode = 'a';
        actual.ServiceRequestUserLifeCycleStatusCodeText = 'a';
        actual.ServiceTechnicianID = 'a';
        actual.ServiceTechnicianName = 'a';
        actual.ServiceTechnicianUUID = 'a';
        actual.SiebelTicketURL = 'a';
        actual.StreetPostalCode = 'a';
        actual.StreetPostalCodeText = 'a';
        actual.SubAreaID = 'a';
        actual.SubAreaName = 'a';
        actual.Subject = 'a';
        actual.UUID = 'a';
        actual.accountSpecialNotes = 'a';
        actual.alternateCallbackNumber = 'a';
        actual.contactNumber = 'a';
        actual.externalReferenceID = 'a';
        actual.lastModifiedDate = Datetime.newInstance(2000,1,1);
        actual.onsiteDueDate = Datetime.newInstance(2000,1,1);
        actual.onsiteDueTime = Time.newInstance(1,0,0,0);
        actual.resolution = 'a';
        actual.specialCustomerNotes = 'a';
        actual.thirdParty = true;
        actual.virtual_x = true;
        actual.virtualSR = 'a';
        system.assertEquals('a', actual.ActionID);
        system.assertEquals('a', actual.ActionName);
        system.assertEquals('a', actual.ApprovalStatusCode);
        system.assertEquals('a', actual.ApprovalStatusCodeText);
        system.assertEquals('a', actual.AssignedTo);
        system.assertEquals('a', actual.AssignedToName);
        system.assertEquals('a', actual.AssignedToUUID);
        system.assertEquals('a', actual.ChangedBy);
        system.assertEquals('a', actual.ChangedByID);
        system.assertEquals('a', actual.CityName);
        system.assertEquals('a', actual.ContactID);
        system.assertEquals('a', actual.ContactName);
        system.assertEquals('a', actual.ContactUUID);
        system.assertEquals('a', actual.ContractID);
        system.assertEquals('a', actual.ContractName);
        system.assertEquals('a', actual.ContractUUID);
        system.assertEquals('a', actual.CountryCode);
        system.assertEquals('a', actual.CountryCodeText);
        system.assertEquals('a', actual.CreatedBy);
        system.assertEquals('a', actual.CreatedByID);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.CreationDate);
        system.assertEquals('a', actual.Customer);
        system.assertEquals('a', actual.CustomerComplaintCodeID);
        system.assertEquals('a', actual.CustomerComplaintCodeName);
        system.assertEquals('a', actual.CustomerID);
        system.assertEquals('a', actual.CustomerUUID);
        system.assertEquals(true, actual.CustomerUpdated);
        system.assertEquals('a', actual.DataOriginTypeCode);
        system.assertEquals('a', actual.DataOriginTypeCodeText);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.ETag);
        system.assertEquals('a', actual.EscalationStatusCode);
        system.assertEquals('a', actual.EscalationStatusCodeText);
        system.assertEquals('a', actual.Fax);
        system.assertEquals('a', actual.HouseID);
        system.assertEquals('a', actual.ID);
        system.assertEquals('a', actual.InitalReviewDateCompleted);
        system.assertEquals('a', actual.InitialReviewDate);
        system.assertEquals('a', actual.InstallationPointID);
        system.assertEquals('a', actual.InstallationPointUUID);
        system.assertEquals('a', actual.LastAgentInteraction);
        system.assertEquals('a', actual.LastCustomerInteractionDate);
        system.assertEquals('a', actual.Mobile);
        system.assertEquals('a', actual.ObjectID);
        system.assertEquals('a', actual.Phone);
        system.assertEquals('a', actual.ProcessingTypeCode);
        system.assertEquals('a', actual.ProcessingTypeCodeText);
        system.assertEquals('a', actual.ProductCategoryDescription);
        system.assertEquals('a', actual.ProductDescription);
        system.assertEquals('a', actual.ProductID);
        system.assertEquals('a', actual.RegionCode);
        system.assertEquals('a', actual.RegionCodeText);
        system.assertEquals('a', actual.ReportedOnDate);
        system.assertEquals('a', actual.ReporterEmail);
        system.assertEquals('a', actual.RequestFinishedAtDateTime);
        system.assertEquals('a', actual.RequestFullfilmentEndDateTime);
        system.assertEquals('a', actual.RequestFullfilmentStartDateTime);
        system.assertEquals('a', actual.RequestTotalProcessingDuration);
        system.assertEquals('a', actual.ResolutionCodeID);
        system.assertEquals('a', actual.ResolutionCodeName);
        system.assertEquals('a', actual.ResolvedOnDateTime);
        system.assertEquals('a', actual.ResponseByProcessorDueDateTime);
        system.assertEquals('a', actual.ResponseByProcessorReferenceDateTime);
        system.assertEquals('a', actual.SerialID);
        system.assertEquals('a', actual.ServiceCodeID);
        system.assertEquals('a', actual.ServiceCodeName);
        system.assertEquals('a', actual.ServicePriorityCode);
        system.assertEquals('a', actual.ServicePriorityCodeText);
        system.assertEquals('a', actual.ServiceRequestLifeCycleStatusCode);
        system.assertEquals('a', actual.ServiceRequestLifeCycleStatusCodeText);
        system.assertEquals('a', actual.ServiceRequestUserLifeCycleStatusCode);
        system.assertEquals('a', actual.ServiceRequestUserLifeCycleStatusCodeText);
        system.assertEquals('a', actual.ServiceTechnicianID);
        system.assertEquals('a', actual.ServiceTechnicianName);
        system.assertEquals('a', actual.ServiceTechnicianUUID);
        system.assertEquals('a', actual.SiebelTicketURL);
        system.assertEquals('a', actual.StreetPostalCode);
        system.assertEquals('a', actual.StreetPostalCodeText);
        system.assertEquals('a', actual.SubAreaID);
        system.assertEquals('a', actual.SubAreaName);
        system.assertEquals('a', actual.Subject);
        system.assertEquals('a', actual.UUID);
        system.assertEquals('a', actual.accountSpecialNotes);
        system.assertEquals('a', actual.alternateCallbackNumber);
        system.assertEquals('a', actual.contactNumber);
        system.assertEquals('a', actual.externalReferenceID);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.lastModifiedDate);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.onsiteDueDate);
        system.assertEquals(Time.newInstance(1,0,0,0), actual.onsiteDueTime);
        system.assertEquals('a', actual.resolution);
        system.assertEquals('a', actual.specialCustomerNotes);
        system.assertEquals(true, actual.thirdParty);
        system.assertEquals(true, actual.virtual_x);
        system.assertEquals('a', actual.virtualSR);

        SAPC4CTickets.ServiceRequestCollection actual0 = new SAPC4CTickets.ServiceRequestCollection();
    }
    @istest
    private static void TestSRActivityReferenceCollection() {
        SAPC4CTickets.SRActivityReferenceCollection actual = new SAPC4CTickets.SRActivityReferenceCollection('a',Datetime.newInstance(2000,1,1),'a','a','a',Datetime.newInstance(2000,1,1),'a','a','a','a','a','a');

        system.assertEquals('a', actual.ActivityID);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.ActivityLastChangeDate);
        system.assertEquals('a', actual.ActivityTypeCode);
        system.assertEquals('a', actual.ActivityTypeCodeText);
        system.assertEquals('a', actual.ActivityUUID);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.ETag);
        system.assertEquals('a', actual.LifeCycleStatusCode);
        system.assertEquals('a', actual.LifeCycleStatusCodeText);
        system.assertEquals('a', actual.ObjectID);
        system.assertEquals('a', actual.ParentObjectID);
        system.assertEquals('a', actual.ServiceRequestID);
        system.assertEquals('a', actual.SubjectName);

        SAPC4CTickets.SRActivityReferenceCollection actual0 = new SAPC4CTickets.SRActivityReferenceCollection();
    }
    @istest
    private static void TestSRBTDocRefCollection() {
        SAPC4CTickets.SRBTDocRefCollection actual = new SAPC4CTickets.SRBTDocRefCollection('a',Datetime.newInstance(2000,1,1),'a','a','a',Datetime.newInstance(2000,1,1),'a','a','a','a','a','a');

        system.assertEquals('a', actual.ActivityID);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.ActivityLastChangeDate);
        system.assertEquals('a', actual.ActivityTypeCode);
        system.assertEquals('a', actual.ActivityTypeCodeText);
        system.assertEquals('a', actual.ActivityUUID);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.ETag);
        system.assertEquals('a', actual.LifeCycleStatusCode);
        system.assertEquals('a', actual.LifeCycleStatusCodeText);
        system.assertEquals('a', actual.ObjectID);
        system.assertEquals('a', actual.ParentObjectID);
        system.assertEquals('a', actual.ServiceRequestID);
        system.assertEquals('a', actual.SubjectName);

        SAPC4CTickets.SRBTDocRefCollection actual0 = new SAPC4CTickets.SRBTDocRefCollection();
    }
    @istest
    private static void TestServiceRequestItemCollection() {
        SAPC4CTickets.ServiceRequestItemCollection actual = new SAPC4CTickets.ServiceRequestItemCollection(Datetime.newInstance(2000,1,1),'a','a','a',Datetime.newInstance(2000,1,1),'a','a','a','a','a','a','a','a','a','a','a','a','a','a',true,'a');

        system.assertEquals(Datetime.newInstance(2000,1,1), actual.CreationDateTime);
        system.assertEquals('a', actual.Description);
        system.assertEquals('a', actual.InvoicingMethodCode);
        system.assertEquals('a', actual.InvoicingMethodCodeText);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.LastChangeDateTime);
        system.assertEquals('a', actual.LineNo);
        system.assertEquals('a', actual.ObjectID);
        system.assertEquals('a', actual.ParentObjectID);
        system.assertEquals('a', actual.ProcessingTypeCode);
        system.assertEquals('a', actual.ProcessingTypeCodeText);
        system.assertEquals('a', actual.ProductID);
        system.assertEquals('a', actual.QuantityMeasureUnitCode);
        system.assertEquals('a', actual.QuantityMeasureUnitCodeText);
        system.assertEquals('a', actual.ServiceRequestID);
        system.assertEquals('a', actual.ServiceRequestUUID);
        system.assertEquals('a', actual.WorkProgressCode);
        system.assertEquals('a', actual.WorkProgressCodeText);
        system.assertEquals('a', actual.accountSpecialNotes);
        system.assertEquals('a', actual.hlLine);
        system.assertEquals(true, actual.nonFRU);
        system.assertEquals('a', actual.serialNumber);

        SAPC4CTickets.ServiceRequestItemCollection actual0 = new SAPC4CTickets.ServiceRequestItemCollection();
    }
    @istest
    private static void TestServiceRequestItemFulfilledCollection() {
        SAPC4CTickets.ServiceRequestItemFulfilledCollection actual = new SAPC4CTickets.ServiceRequestItemFulfilledCollection(Datetime.newInstance(2000,1,1),Datetime.newInstance(2000,1,1),'a','a','a',0,Datetime.newInstance(2000,1,1));

        system.assertEquals(Datetime.newInstance(2000,1,1), actual.ETag);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.EndDateTime);
        system.assertEquals('a', actual.ID);
        system.assertEquals('a', actual.ObjectID);
        system.assertEquals('a', actual.ParentObjectID);
        system.assertEquals(0, actual.Quantity);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.StartDateTime);

        SAPC4CTickets.ServiceRequestItemFulfilledCollection actual0 = new SAPC4CTickets.ServiceRequestItemFulfilledCollection();
    }
    @istest
    private static void TestServiceRequestItemRequestedCollection() {
        SAPC4CTickets.ServiceRequestItemRequestedCollection actual = new SAPC4CTickets.ServiceRequestItemRequestedCollection(Datetime.newInstance(2000,1,1),Datetime.newInstance(2000,1,1),'a','a','a',0,Datetime.newInstance(2000,1,1));

        system.assertEquals(Datetime.newInstance(2000,1,1), actual.ETag);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.EndDateTime);
        system.assertEquals('a', actual.ID);
        system.assertEquals('a', actual.ObjectID);
        system.assertEquals('a', actual.ParentObjectID);
        system.assertEquals(0, actual.Quantity);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.StartDateTime);

        SAPC4CTickets.ServiceRequestItemRequestedCollection actual0 = new SAPC4CTickets.ServiceRequestItemRequestedCollection();
    }
    @istest
    private static void TestServiceRequestItemTextCollection() {
        SAPC4CTickets.ServiceRequestItemTextCollection actual = new SAPC4CTickets.ServiceRequestItemTextCollection('a','a','a',Datetime.newInstance(2000,1,1),Datetime.newInstance(2000,1,1),'a','a','a','a','a','a','a','a',Datetime.newInstance(2000,1,1));

        system.assertEquals('a', actual.AuthorName);
        system.assertEquals('a', actual.AuthorUUID);
        system.assertEquals('a', actual.CreatedBy);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.CreatedOn);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.ETag);
        system.assertEquals('a', actual.LanguageCode);
        system.assertEquals('a', actual.LanguageCodeText);
        system.assertEquals('a', actual.LastUpdatedBy);
        system.assertEquals('a', actual.ObjectID);
        system.assertEquals('a', actual.ParentObjectID);
        system.assertEquals('a', actual.Text);
        system.assertEquals('a', actual.TypeCode);
        system.assertEquals('a', actual.TypeCodeText);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.UpdatedOn);

        SAPC4CTickets.ServiceRequestItemTextCollection actual0 = new SAPC4CTickets.ServiceRequestItemTextCollection();
    }
    @istest
    private static void TestServiceRequestServiceReferenceObjectCollection() {
        SAPC4CTickets.ServiceRequestServiceReferenceObjectCollection actual = new SAPC4CTickets.ServiceRequestServiceReferenceObjectCollection(Datetime.newInstance(2000,1,1),'a','a','a','a');

        system.assertEquals(Datetime.newInstance(2000,1,1), actual.ETag);
        system.assertEquals('a', actual.InstallationPointID);
        system.assertEquals('a', actual.InstallationPointUUID);
        system.assertEquals('a', actual.ObjectID);
        system.assertEquals('a', actual.ParentObjectID);

        SAPC4CTickets.ServiceRequestServiceReferenceObjectCollection actual0 = new SAPC4CTickets.ServiceRequestServiceReferenceObjectCollection();
    }
    @istest
    private static void TestServiceRequestTextCollection() {
        SAPC4CTickets.ServiceRequestTextCollection actual = new SAPC4CTickets.ServiceRequestTextCollection('a','a','a',Datetime.newInstance(2000,1,1),Datetime.newInstance(2000,1,1),'a','a','a','a','a','a','a','a',Datetime.newInstance(2000,1,1));

        system.assertEquals('a', actual.AuthorName);
        system.assertEquals('a', actual.AuthorUUID);
        system.assertEquals('a', actual.CreatedBy);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.CreatedOn);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.ETag);
        system.assertEquals('a', actual.LanguageCode);
        system.assertEquals('a', actual.LanguageCodeText);
        system.assertEquals('a', actual.LastUpdatedBy);
        system.assertEquals('a', actual.ObjectID);
        system.assertEquals('a', actual.ParentObjectID);
        system.assertEquals('a', actual.Text);
        system.assertEquals('a', actual.TypeCode);
        system.assertEquals('a', actual.TypeCodeText);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.UpdatedOn);

        SAPC4CTickets.ServiceRequestTextCollection actual0 = new SAPC4CTickets.ServiceRequestTextCollection();
    }
    @istest
    private static void testrunQuery() {
        SAPC4CTickets request = testSetup();
        /*overcast.Query query1 = new overcast.Query();
        query1.limit_x = 10;
        query1.offset = 10;
        
        SAPC4CTickets response = request.runQuery(query1);
        system.assertEquals('a', response.ServiceRequestCollection[0].ActionID);
        string requestid = request.runQueryAsync(query1, null, null, new Continuation(10));*///Commented by Sourav for Overcast uninstall
    }

    @istest
    private static void testrunInsert() {
        SAPC4CTickets request = testSetup();
        /*SAPC4CTickets response = request.runInsert();
        system.assertEquals('a', response.ServiceRequestCollection[0].ActionID);
        string requestid = request.runInsertAsync(null, null, new Continuation(10));*///Commented by Sourav for Overcast uninstall
    }

    @istest
    private static void testrunUpdate() {
        SAPC4CTickets request = testSetup();
        /*SAPC4CTickets response = request.runUpdate();
        system.assertEquals('a', response.ServiceRequestCollection[0].ActionID);
        string requestid = request.runUpdateAsync(null, null, new Continuation(10));*///Commented by Sourav for Overcast uninstall
    }

    @istest
    private static void testrunDelete() {
        SAPC4CTickets request = testSetup();        
        /*SAPC4CTickets response = request.runDelete();        
        system.assertEquals('a', response.ServiceRequestCollection[0].ActionID);
        string requestid = request.runDeleteAsync(null, null, new Continuation(10));*/ //Commented by Sourav for Overcast uninstall     
    }

    private static SAPC4CTickets testSetup() {
        //overcast.TestingUtilities.SetupTestEnvironment('SAPC4CTickets');//Commented by Sourav for Overcast uninstall
        SAPC4CTickets request = new SAPC4CTickets();
        /*SAPC4CTickets.ServiceRequestCollection value1 = new SAPC4CTickets.ServiceRequestCollection();
        value1.ActionID = 'a';
        request.ServiceRequestCollection.add(value1);

        string s = request.serialize();
        request.testResponse = '{"output":' + s + '}';*///Commented by Sourav for Overcast uninstall
        return request;
    }

    @istest
    private static void TestSerialize() {
        SAPC4CTickets input = new SAPC4CTickets();
        SAPC4CTickets.ServiceRequestCollection value1 = new SAPC4CTickets.ServiceRequestCollection();
        value1.ActionID = 'a';
        input.ServiceRequestCollection.add(value1);
        SAPC4CTickets actual = (SAPC4CTickets)JSON.deserialize(input.serialize(), SAPC4CTickets.class);
        system.assertEquals('a', actual.ServiceRequestCollection[0].ActionID);
    }

    @istest
    private static void TestDeserialize() {
        SAPC4CTickets output = new SAPC4CTickets();
        SAPC4CTickets.ServiceRequestCollection value1 = new SAPC4CTickets.ServiceRequestCollection();
        value1.ActionID = 'a';
        output.ServiceRequestCollection.add(value1);

        string s = output.serialize();
        SAPC4CTickets actual = SAPC4CTickets.deserialize('{"output":' + s + '}');
        system.assertEquals('a', actual.ServiceRequestCollection[0].ActionID);
    }

    @istest
    private static void TestDeserializeError() {
        try {
            SAPC4CTickets actual = SAPC4CTickets.deserialize('{"error":["A test error"]}');
            system.assert(false, 'No exception thrown');
        }
        catch (SAPC4CTickets.SAPC4CTicketsException e) {
            system.assertEquals('A test error', e.getMessage());
        }
    }

    @istest
    private static void TestGetterSetter() {
        SAPC4CTickets output = new SAPC4CTickets();
        output.set('SAMPLE1', new map<string, object>{
            'FIELD1' => 'VALUE1'
        });
        
        system.assertEquals(null, output.get('NOVAL'));
        
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));		
    }
    
    @istest
    private static void TestLoadAsyncResponse() {
        SAPC4CTickets output = new SAPC4CTickets();
        output.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        
        system.assertEquals(null, output.get('NOVAL'));
        
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));		
    }
    
    @istest
    private static void TestGetMetadata() {
        SAPC4CTickets output = new SAPC4CTickets();
        /*map<string, overcast.TypeInfo> metadata = output.getMetadata();
        
        set<string> keys = metadata.keySet();
        system.assert(keys.contains('ServiceRequestCollection'));
        system.assert(keys.contains('SRActivityReferenceCollection'));
        system.assert(keys.contains('SRBTDocRefCollection'));
        system.assert(keys.contains('ServiceRequestItemCollection'));
        system.assert(keys.contains('ServiceRequestItemFulfilledCollection'));
        system.assert(keys.contains('ServiceRequestItemRequestedCollection'));
        system.assert(keys.contains('ServiceRequestItemTextCollection'));
        system.assert(keys.contains('ServiceRequestServiceReferenceObjectCollection'));
        system.assert(keys.contains('ServiceRequestTextCollection'));
        
        overcast.TypeInfo first = metadata.get(output.getTopTypeName());
        system.assertNotEquals(null, first);
        system.assertEquals('ServiceRequestCollection', first.name);*///Commented by Sourav for Overcast uninstall
    }
}