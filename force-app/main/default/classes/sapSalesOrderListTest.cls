/* 
 * Generated by Overcast UTC 2020-01-05 06:43:46Z.
 * Changes to this class may cause incorrect behavior and will be lost if the scenario is re-activated.
 */
@istest
private class sapSalesOrderListTest {
    @istest
    private static void testsapSalesOrderList() {
        sapSalesOrderList actual = new sapSalesOrderList();
        system.assertNotEquals(null, actual.BAPI_SALESORDER_GETLIST);
        system.assertNotEquals(null, actual.RETURN_x);
        system.assertNotEquals(null, actual.MATERIAL_EVG);
        system.assertNotEquals(null, actual.SALES_ORDERS);
    }

    @istest
    private static void TestBAPI_SALESORDER_GETLIST() {
        sapSalesOrderList.BAPI_SALESORDER_GETLIST actual = new sapSalesOrderList.BAPI_SALESORDER_GETLIST('a',Date.newInstance(2000,1,1),Date.newInstance(2000,1,1),'a','a','a','a','a');

        system.assertEquals('a', actual.CUSTOMER_NUMBER);
        system.assertEquals(Date.newInstance(2000,1,1), actual.DOCUMENT_DATE);
        system.assertEquals(Date.newInstance(2000,1,1), actual.DOCUMENT_DATE_TO);
        system.assertEquals('a', actual.MATERIAL);
        system.assertEquals('a', actual.PURCHASE_ORDER);
        system.assertEquals('a', actual.PURCHASE_ORDER_NUMBER);
        system.assertEquals('a', actual.SALES_ORGANIZATION);
        system.assertEquals('a', actual.TRANSACTION_GROUP);

        sapSalesOrderList.BAPI_SALESORDER_GETLIST actual0 = new sapSalesOrderList.BAPI_SALESORDER_GETLIST();
    }
    @istest
    private static void TestRETURN_x() {
        sapSalesOrderList.RETURN_x actual = new sapSalesOrderList.RETURN_x('a','a','a','a','a','a','a','a','a');

        system.assertEquals('a', actual.TYPE_x);
        system.assertEquals('a', actual.CODE);
        system.assertEquals('a', actual.MESSAGE);
        system.assertEquals('a', actual.LOG_NO);
        system.assertEquals('a', actual.LOG_MSG_NO);
        system.assertEquals('a', actual.MESSAGE_V1);
        system.assertEquals('a', actual.MESSAGE_V2);
        system.assertEquals('a', actual.MESSAGE_V3);
        system.assertEquals('a', actual.MESSAGE_V4);

        sapSalesOrderList.RETURN_x actual0 = new sapSalesOrderList.RETURN_x();
    }
    @istest
    private static void TestMATERIAL_EVG() {
        sapSalesOrderList.MATERIAL_EVG actual = new sapSalesOrderList.MATERIAL_EVG('a','a','a');

        system.assertEquals('a', actual.MATERIAL_EXT);
        system.assertEquals('a', actual.MATERIAL_VERS);
        system.assertEquals('a', actual.MATERIAL_GUID);

        sapSalesOrderList.MATERIAL_EVG actual0 = new sapSalesOrderList.MATERIAL_EVG();
    }
    @istest
    private static void TestSALES_ORDERS() {
        sapSalesOrderList.SALES_ORDERS actual = new sapSalesOrderList.SALES_ORDERS('a','a','a','a','a',Date.newInstance(2000,1,1),0,Date.newInstance(2000,1,1),'a','a',Date.newInstance(2000,1,1),Date.newInstance(2000,1,1),'a','a','a','a',0,0,'a',0,0,'a',0,0,'a','a','a','a','a','a','a','a');

        actual.GI_DATE = Date.newInstance(2000,1,1);
        actual.CURRENCY_x = 'a';
        actual.PLANT = 'a';
        actual.STORE_LOC = 'a';
        actual.ORD_REASON = 'a';
        actual.REASON_REJ = 'a';
        actual.B_UOM_ISO = 'a';
        actual.CD_UNT_ISO = 'a';
        actual.S_UNIT_ISO = 'a';
        actual.CURR_ISO = 'a';
        actual.PURCH_NO_C = 'a';
        actual.EXCHG_RATE_V = 0;
        actual.MAT_EXT = 'a';
        actual.MAT_GUID = 'a';
        actual.MAT_VERS = 'a';
        actual.CREATION_DATE = Date.newInstance(2000,1,1);
        actual.CREATION_TIME = 'a';
        actual.STATUS_DOC = 'a';
        system.assertEquals('a', actual.SD_DOC);
        system.assertEquals('a', actual.ITM_NUMBER);
        system.assertEquals('a', actual.MATERIAL);
        system.assertEquals('a', actual.SHORT_TEXT);
        system.assertEquals('a', actual.DOC_TYPE);
        system.assertEquals(Date.newInstance(2000,1,1), actual.DOC_DATE);
        system.assertEquals(0, actual.REQ_QTY);
        system.assertEquals(Date.newInstance(2000,1,1), actual.REQ_DATE);
        system.assertEquals('a', actual.PURCH_NO);
        system.assertEquals('a', actual.BATCH);
        system.assertEquals(Date.newInstance(2000,1,1), actual.VALID_FROM);
        system.assertEquals(Date.newInstance(2000,1,1), actual.VALID_TO);
        system.assertEquals('a', actual.BILL_BLOCK);
        system.assertEquals('a', actual.DLV_BLOCK);
        system.assertEquals('a', actual.SOLD_TO);
        system.assertEquals('a', actual.NAME);
        system.assertEquals(0, actual.EXCHG_RATE);
        system.assertEquals(0, actual.DLV_QTY);
        system.assertEquals('a', actual.BASE_UOM);
        system.assertEquals(0, actual.NET_PRICE);
        system.assertEquals(0, actual.COND_P_UNT);
        system.assertEquals('a', actual.COND_UNIT);
        system.assertEquals(0, actual.NET_VAL_HD);
        system.assertEquals(0, actual.NET_VALUE);
        system.assertEquals('a', actual.DIVISION);
        system.assertEquals('a', actual.DOC_STATUS);
        system.assertEquals('a', actual.SALES_GRP);
        system.assertEquals('a', actual.SALES_OFF);
        system.assertEquals('a', actual.SALES_ORG);
        system.assertEquals('a', actual.SALES_UNIT);
        system.assertEquals('a', actual.SHIP_POINT);
        system.assertEquals('a', actual.DISTR_CHAN);
        system.assertEquals(Date.newInstance(2000,1,1), actual.GI_DATE);
        system.assertEquals('a', actual.CURRENCY_x);
        system.assertEquals('a', actual.PLANT);
        system.assertEquals('a', actual.STORE_LOC);
        system.assertEquals('a', actual.ORD_REASON);
        system.assertEquals('a', actual.REASON_REJ);
        system.assertEquals('a', actual.B_UOM_ISO);
        system.assertEquals('a', actual.CD_UNT_ISO);
        system.assertEquals('a', actual.S_UNIT_ISO);
        system.assertEquals('a', actual.CURR_ISO);
        system.assertEquals('a', actual.PURCH_NO_C);
        system.assertEquals(0, actual.EXCHG_RATE_V);
        system.assertEquals('a', actual.MAT_EXT);
        system.assertEquals('a', actual.MAT_GUID);
        system.assertEquals('a', actual.MAT_VERS);
        system.assertEquals(Date.newInstance(2000,1,1), actual.CREATION_DATE);
        system.assertEquals('a', actual.CREATION_TIME);
        system.assertEquals('a', actual.STATUS_DOC);

        sapSalesOrderList.SALES_ORDERS actual0 = new sapSalesOrderList.SALES_ORDERS();
    }

    @istest
    private static void testRun() {
        sapSalesOrderList request = testSetup();
        /*sapSalesOrderList response = request.run();
        system.assertEquals('a', response.BAPI_SALESORDER_GETLIST.CUSTOMER_NUMBER);
        string requestid = request.runAsync(null, null, new Continuation(10));*///Commented by Sourav for Overcast uninstall
    }

    private static sapSalesOrderList testSetup() {
        //overcast.TestingUtilities.SetupTestEnvironment('sapSalesOrderList');//Commented by Sourav for Overcast Uninstall
        sapSalesOrderList request = new sapSalesOrderList();
        request.BAPI_SALESORDER_GETLIST.CUSTOMER_NUMBER = 'a';

        string s = request.serialize();
        request.testResponse = '{"output":' + s + '}';
        return request;
    }


    @istest
    private static void TestSerialize() {
        sapSalesOrderList input = new sapSalesOrderList();
        input.BAPI_SALESORDER_GETLIST.CUSTOMER_NUMBER = 'a';
        sapSalesOrderList actual = (sapSalesOrderList)JSON.deserialize(input.serialize(), sapSalesOrderList.class);
        system.assertEquals('a', actual.BAPI_SALESORDER_GETLIST.CUSTOMER_NUMBER);
    }

    @istest
    private static void TestDeserialize() {
        sapSalesOrderList output = new sapSalesOrderList();
        output.BAPI_SALESORDER_GETLIST.CUSTOMER_NUMBER = 'a';

        string s = output.serialize();
        sapSalesOrderList actual = sapSalesOrderList.deserialize('{"output":' + s + '}');
        system.assertEquals('a', actual.BAPI_SALESORDER_GETLIST.CUSTOMER_NUMBER);
    }

    @istest
    private static void TestDeserializeError() {
        try {
            sapSalesOrderList actual = sapSalesOrderList.deserialize('{"error":["A test error"]}');
            system.assert(false, 'No exception thrown');
        }
        catch (sapSalesOrderList.sapSalesOrderListException e) {
            system.assertEquals('A test error', e.getMessage());
        }
    }

    @istest
    private static void TestGetterSetter() {
        sapSalesOrderList output = new sapSalesOrderList();
        output.set('SAMPLE1', new map<string, object>{
            'FIELD1' => 'VALUE1'
        });
        
        system.assertEquals(null, output.get('NOVAL'));
        
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));       
    }
    
    @istest
    private static void TestLoadAsyncResponse() {
        sapSalesOrderList output = new sapSalesOrderList();
        output.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        system.assertEquals(null, output.get('NOVAL'));
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));
    }

    @istest
    private static void TestGetMetadata() {
        sapSalesOrderList output = new sapSalesOrderList();/*
        map<string, overcast.TypeInfo> metadata = output.getMetadata();
        
        set<string> keys = metadata.keySet();
        system.assert(keys.contains('BAPI_SALESORDER_GETLIST'));
        system.assert(keys.contains('RETURN_x'));
        system.assert(keys.contains('MATERIAL_EVG'));
        system.assert(keys.contains('SALES_ORDERS'));
        
        overcast.TypeInfo first = metadata.get(output.getTopTypeName());
        system.assertNotEquals(null, first);
        system.assertEquals('BAPI_SALESORDER_GETLIST', first.name);*/ //Commented by Sourav for Overcast Uninstall
    }
}