// This class allows advanced customizations for the mapping of records from sapCustomerDetail_GT_CUST_ADDRDATA__c to Account.
//
// Scenario: sapCustomerDetail
// Source Object: sapCustomerDetail_GT_CUST_ADDRDATA__c
// Target Object: Account
// Mapping Record Name: Customer_Account
// Direction: Inbound
// 
// Generated by Overcast 2018-09-07 17:58:32Z
// Your changes will not be overwritten when resaving the mapping.
//
global class Mapping_Customer_Account {//implements overcast.ObjectMapping.EventPlugin, overcast.ObjectMapping.BatchableEventPlugin {//Commented by Sourav for Overcast uninstall
/*
    global void execute(overcast__Run__c scenarioExecution, sapCustomerDetail_GT_CUST_ADDRDATA__c[] records) {
        overcast.EpgwController.MappingConfig config = new overcast.EpgwController.MappingConfig('sapCustomerDetail_GT_CUST_ADDRDATA__c', records);
        config.rollbackOnError = true;
        config.eventplugin = this;
        config.mappings = [SELECT overcast__Target__c, overcast__Map__c, overcast__Joins__c
                    FROM overcast__IntegrationFieldMap__c 
                    WHERE overcast__ApexClass__c = 'Mapping_Customer_Account'];

        m_execution = scenarioExecution;
        m_loglevel = GetLogLevel(scenarioExecution.Id);

        overcast.EpgwController.RunMappingTrigger(config);
    
        this.saveLogs();    
    }

    // Begin ObjectMapping.EventPlugin interface implementation

    // BeforeUpsert Is called for each record that will be inserted/updated into the target object.
    // If the target record has an ID it will be updated, otherwise inserted.
    // Return true to accept the record for insert/update. False to reject the record.
    global boolean beforeUpsert(sobject sourceRecord, sobject targetRecord) {
        //sapCustomerDetail_GT_CUST_ADDRDATA__c source = (sapCustomerDetail_GT_CUST_ADDRDATA__c)sourceRecord;
        Account target = (Account)targetRecord;
        if (target.Id == null) {
            //New record, so set necessary defaults
            target.Country_Cluster__c = target.Division_Account__c = target.Region__c = target.Account_Territory__c = 'UNASSIGNED';
          //  target.Validation_Status__c = 'Awaiting Validation';
            target.Validation_Status__c = 'Validated'; // Added by SAM on 3/19/19 
            target.Account_Status__c = 'Active'; // Added by SAM on 3/19/19 
        }
        return true;
    }
                
    // AfterInsert Is called after both insert And update DML operations are successfull. 
    // If rollbackOnError Is true And a DML exception occurs when inserting Or updating, the transaction Is rolled back And AfterInsert Is Not called.
    // If rollbackOnError Is false And a DML exception occurs when inserting Or updating, AfterInsert Is called And saveResults will contain the error messages.
    global void afterInsert(sobject[] insertedRecords, Database.SaveResult[] saveResults) { 
        for (Database.Saveresult r : saveResults) {
            if (!r.isSuccess()) {
                logWarning(r.getErrors()[0].getMessage());
                setStatusToWarning();
            }
        } 
    }
        
    // AfterUpdate Is called after both insert And update DML operations are successfull. 
    // If rollbackOnError Is true And a DML exception occurs when inserting Or updating, the transaction Is rolled back And AfterUpdate Is Not called.
    // If rollbackOnError Is false And a DML exception occurs when inserting Or updating, AfterUpdate Is called And saveResults will contain the error messages.
    global void afterUpdate(sobject[] updatedRecords, Database.SaveResult[] saveResults) {  
        for (Database.Saveresult r : saveResults) {
            if (!r.isSuccess()) {
                logWarning(r.getErrors()[0].getMessage());
                setStatusToWarning();
            }
        } 
    }

    // End of interface implementation
        
    // Begin helper methods        
        
    // Log an error message to the scenario execution log
    global void logError(String message) {
        if (m_loglevel >= 1) {
            logs.add(new overcast__Log__c(overcast__Run__c=m_execution.Id, overcast__Message__c='[Mapping_Customer_Account] ' + message, overcast__LogLevel__c = 'ERROR', overcast__Time__c=DateTime.now()));            
        }
    }
        
    // Log an warning message to the scenario execution log        
    global void logWarning(String message) {
        if (m_loglevel >= 3) {
            logs.add(new overcast__Log__c(overcast__Run__c=m_execution.Id, overcast__Message__c='[Mapping_Customer_Account] ' + message, overcast__LogLevel__c = 'WARN', overcast__Time__c=DateTime.now()));        
        }
    }
        
    // Log an info message to the scenario execution log
    global void logInfo(String message) {
        if (m_loglevel >= 4) {
            logs.add(new overcast__Log__c(overcast__Run__c=m_execution.Id, overcast__Message__c='[Mapping_Customer_Account] ' + message, overcast__LogLevel__c = 'INFO', overcast__Time__c=DateTime.now()));
        }
    } 

    // Log a debug message to the scenario execution log
    global void logDebug(String message) {
        if (m_loglevel >= 5) {
            logs.add(new overcast__Log__c(overcast__Run__c=m_execution.Id, overcast__Message__c='[Mapping_Customer_Account] ' + message, overcast__LogLevel__c = 'DEBUG', overcast__Time__c=DateTime.now()));
        }
    }
        
    // Set the scenario execution status to error
    global void setStatusToError() {
        this.m_execution.overcast__StatusCode__c = 400;
    }
        
    // Set the scenario execution status to warning
    global void setStatusToWarning() {
        this.m_execution.overcast__StatusCode__c = 500;
    }
        
    global void saveLogs() {
        If (!logs.isempty()) {
            insert logs;
        }
        update m_execution;

        logs.clear();
    }
        
    // End helper methods
            
    private final List<overcast__Log__c> logs = new List<overcast__Log__c>();
    
    @testvisible
    private overcast__Run__c m_execution;   
    
    private integer m_loglevel = 4;
            
    private static integer GetLogLevel(Id runid) {
        string base = GetLogLevel();
        overcast__Run__c run = [SELECT overcast__Scenario__r.overcast__LogLevel__c FROM overcast__Run__c WHERE Id = :runId];
        string selected = run.overcast__Scenario__r.overcast__LogLevel__c != null ? run.overcast__Scenario__r.overcast__LogLevel__c : base;
        
        return GetLogLevelValue(selected);
    }
    
    @testvisible
    private static integer GetLogLevelValue(string ll)
    {
        if (ll == null) return 4;
        ll = ll.toUpperCase();
        if (ll == 'DEBUG') return 5;
        if (ll == 'INFO') return 4;
        if (ll == 'WARN') return 3;
        if (ll == 'ERROR') return 2;
        if (ll == 'FATAL') return 1;
        if (ll == 'NONE') return 0;
        if (ll == 'VERBOSE') return 6;
        return 4;
    }
    
    private static string GetLogLevel()
    {
        overcast__EpgwSettings__c ll = overcast__EpgwSettings__c.getInstance('LogLevel');
        if (ll == null) return null;
        return ll.overcast__Value__c;
    }*///Commented by Sourav for Overcast uninstall
}